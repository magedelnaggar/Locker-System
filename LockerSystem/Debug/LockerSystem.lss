
LockerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000027be  00002832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002580  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010d1  00000000  00000000  00004e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006031  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000061a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a63f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4b 10 	call	0x2096	; 0x2096 <main>
      7a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 eb       	ldi	r26, 0xB3	; 179
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 eb       	ldi	r24, 0xB3	; 179
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_enuInit>:

//own libs
#include "EEPROM_config.h"
#include "EEPROM_priv.h"

ES_t EEPROM_enuInit(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	89 83       	std	Y+1, r24	; 0x01

	//body

	return Local_enuErrorState;
     b44:	89 81       	ldd	r24, Y+1	; 0x01
}
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <EEPROM_enuWrite>:
ES_t EEPROM_enuWrite(u16 Copy_u16Address, u8 Copy_u8Data){
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	00 d0       	rcall	.+0      	; 0xb54 <EEPROM_enuWrite+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <EEPROM_enuWrite+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	9b 83       	std	Y+3, r25	; 0x03
     b5c:	8a 83       	std	Y+2, r24	; 0x02
     b5e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01

	/*1. Wait until EEWE becomes zero.*/
	//while(GET_BIT(EECR,EEWE) == 1);
	/*2. Wait until SPMEN in SPMCR becomes zero.*/
	while(GET_BIT(SPMCR,SPMEN));
     b64:	ec e3       	ldi	r30, 0x3C	; 60
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	81 70       	andi	r24, 0x01	; 1
     b70:	90 70       	andi	r25, 0x00	; 0
     b72:	88 23       	and	r24, r24
     b74:	b9 f7       	brne	.-18     	; 0xb64 <EEPROM_enuWrite+0x16>
	/*3. Write new EEPROM address to EEAR.*/
	EEAR = Copy_u16Address;
     b76:	ee e3       	ldi	r30, 0x3E	; 62
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	9b 81       	ldd	r25, Y+3	; 0x03
     b7e:	91 83       	std	Z+1, r25	; 0x01
     b80:	80 83       	st	Z, r24
	/*4. Write new EEPROM data to EEDR.*/
	EEDR = Copy_u8Data;
     b82:	ed e3       	ldi	r30, 0x3D	; 61
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	8c 81       	ldd	r24, Y+4	; 0x04
     b88:	80 83       	st	Z, r24
	/*5. Write a logical one to the EEMWE bit while writing a zero to EEWE in EECR*/
	SET_BIT(EECR,EEMWE);
     b8a:	ac e3       	ldi	r26, 0x3C	; 60
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	ec e3       	ldi	r30, 0x3C	; 60
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	84 60       	ori	r24, 0x04	; 4
     b96:	8c 93       	st	X, r24
	/*6. Within four clock cycles after setting EEMWE, write a logical one to EEWE.*/
	SET_BIT(EECR,EEWE);
     b98:	ac e3       	ldi	r26, 0x3C	; 60
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	ec e3       	ldi	r30, 0x3C	; 60
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
     ba6:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <EEPROM_enuRead>:
ES_t EEPROM_enuRead(u16 Copy_u16Address, u8* Copy_u8Data){
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <EEPROM_enuRead+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <EEPROM_enuRead+0x8>
     bc0:	0f 92       	push	r0
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	9b 83       	std	Y+3, r25	; 0x03
     bc8:	8a 83       	std	Y+2, r24	; 0x02
     bca:	7d 83       	std	Y+5, r23	; 0x05
     bcc:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	89 83       	std	Y+1, r24	; 0x01

	/*1. Wait until EEWE becomes zero.*/
	//while(GET_BIT(EECR,EEWE) == 1);

	EEAR = Copy_u16Address;
     bd2:	ee e3       	ldi	r30, 0x3E	; 62
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	80 83       	st	Z, r24
	SET_BIT(EECR,EERE);
     bde:	ac e3       	ldi	r26, 0x3C	; 60
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ec e3       	ldi	r30, 0x3C	; 60
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	81 60       	ori	r24, 0x01	; 1
     bea:	8c 93       	st	X, r24
	*Copy_u8Data = EEDR;
     bec:	ed e3       	ldi	r30, 0x3D	; 61
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	ec 81       	ldd	r30, Y+4	; 0x04
     bf4:	fd 81       	ldd	r31, Y+5	; 0x05
     bf6:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
     bf8:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <DIO_enuInit>:
//own libs
#include "DIO_config.h"
#include "DIO_priv.h"

ES_t DIO_enuInit(void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	89 83       	std	Y+1, r24	; 0x01

	//body

	return Local_enuErrorState;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Direction)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <DIO_enuSetPinDirection+0x6>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <DIO_enuSetPinDirection+0x8>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <DIO_enuSetPinDirection+0xa>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	8a 83       	std	Y+2, r24	; 0x02
     c34:	6b 83       	std	Y+3, r22	; 0x03
     c36:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	08 f0       	brcs	.+2      	; 0xc44 <DIO_enuSetPinDirection+0x20>
     c42:	d0 c0       	rjmp	.+416    	; 0xde4 <DIO_enuSetPinDirection+0x1c0>
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	88 30       	cpi	r24, 0x08	; 8
     c48:	08 f0       	brcs	.+2      	; 0xc4c <DIO_enuSetPinDirection+0x28>
     c4a:	cc c0       	rjmp	.+408    	; 0xde4 <DIO_enuSetPinDirection+0x1c0>
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	08 f0       	brcs	.+2      	; 0xc54 <DIO_enuSetPinDirection+0x30>
     c52:	c8 c0       	rjmp	.+400    	; 0xde4 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction<= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	3e 83       	std	Y+6, r19	; 0x06
     c5c:	2d 83       	std	Y+5, r18	; 0x05
     c5e:	6d 81       	ldd	r22, Y+5	; 0x05
     c60:	7e 81       	ldd	r23, Y+6	; 0x06
     c62:	61 30       	cpi	r22, 0x01	; 1
     c64:	71 05       	cpc	r23, r1
     c66:	09 f4       	brne	.+2      	; 0xc6a <DIO_enuSetPinDirection+0x46>
     c68:	41 c0       	rjmp	.+130    	; 0xcec <DIO_enuSetPinDirection+0xc8>
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	91 05       	cpc	r25, r1
     c72:	34 f4       	brge	.+12     	; 0xc80 <DIO_enuSetPinDirection+0x5c>
     c74:	2d 81       	ldd	r18, Y+5	; 0x05
     c76:	3e 81       	ldd	r19, Y+6	; 0x06
     c78:	21 15       	cp	r18, r1
     c7a:	31 05       	cpc	r19, r1
     c7c:	71 f0       	breq	.+28     	; 0xc9a <DIO_enuSetPinDirection+0x76>
     c7e:	b0 c0       	rjmp	.+352    	; 0xde0 <DIO_enuSetPinDirection+0x1bc>
     c80:	6d 81       	ldd	r22, Y+5	; 0x05
     c82:	7e 81       	ldd	r23, Y+6	; 0x06
     c84:	62 30       	cpi	r22, 0x02	; 2
     c86:	71 05       	cpc	r23, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_enuSetPinDirection+0x68>
     c8a:	59 c0       	rjmp	.+178    	; 0xd3e <DIO_enuSetPinDirection+0x11a>
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	83 30       	cpi	r24, 0x03	; 3
     c92:	91 05       	cpc	r25, r1
     c94:	09 f4       	brne	.+2      	; 0xc98 <DIO_enuSetPinDirection+0x74>
     c96:	7c c0       	rjmp	.+248    	; 0xd90 <DIO_enuSetPinDirection+0x16c>
     c98:	a3 c0       	rjmp	.+326    	; 0xde0 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~ (DIO_BIT_MASK     << Copy_u8PinID);
     c9a:	aa e3       	ldi	r26, 0x3A	; 58
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ea e3       	ldi	r30, 0x3A	; 58
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_enuSetPinDirection+0x92>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	2a 95       	dec	r18
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_enuSetPinDirection+0x8e>
     cba:	80 95       	com	r24
     cbc:	84 23       	and	r24, r20
     cbe:	8c 93       	st	X, r24
			DDRA |=   (Copy_u8Direction << Copy_u8PinID);
     cc0:	aa e3       	ldi	r26, 0x3A	; 58
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	ea e3       	ldi	r30, 0x3A	; 58
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	48 2f       	mov	r20, r24
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	b9 01       	movw	r22, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_enuSetPinDirection+0xbc>
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	8a 95       	dec	r24
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_enuSetPinDirection+0xb8>
     ce4:	cb 01       	movw	r24, r22
     ce6:	84 2b       	or	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	7a c0       	rjmp	.+244    	; 0xde0 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~ (DIO_BIT_MASK     << Copy_u8PinID);
     cec:	a7 e3       	ldi	r26, 0x37	; 55
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e3       	ldi	r30, 0x37	; 55
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_enuSetPinDirection+0xe4>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	2a 95       	dec	r18
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_enuSetPinDirection+0xe0>
     d0c:	80 95       	com	r24
     d0e:	84 23       	and	r24, r20
     d10:	8c 93       	st	X, r24
			DDRB |=   (Copy_u8Direction << Copy_u8PinID);
     d12:	a7 e3       	ldi	r26, 0x37	; 55
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e7 e3       	ldi	r30, 0x37	; 55
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	b9 01       	movw	r22, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_enuSetPinDirection+0x10e>
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_enuSetPinDirection+0x10a>
     d36:	cb 01       	movw	r24, r22
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	51 c0       	rjmp	.+162    	; 0xde0 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~ (DIO_BIT_MASK     << Copy_u8PinID);
     d3e:	a4 e3       	ldi	r26, 0x34	; 52
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e4 e3       	ldi	r30, 0x34	; 52
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_enuSetPinDirection+0x136>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	2a 95       	dec	r18
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_enuSetPinDirection+0x132>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
			DDRC |=   (Copy_u8Direction << Copy_u8PinID);
     d64:	a4 e3       	ldi	r26, 0x34	; 52
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e4 e3       	ldi	r30, 0x34	; 52
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	b9 01       	movw	r22, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_enuSetPinDirection+0x160>
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	8a 95       	dec	r24
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_enuSetPinDirection+0x15c>
     d88:	cb 01       	movw	r24, r22
     d8a:	84 2b       	or	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	28 c0       	rjmp	.+80     	; 0xde0 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~ (DIO_BIT_MASK     << Copy_u8PinID);
     d90:	a1 e3       	ldi	r26, 0x31	; 49
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e1 e3       	ldi	r30, 0x31	; 49
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_enuSetPinDirection+0x188>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	2a 95       	dec	r18
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_enuSetPinDirection+0x184>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
			DDRD |=   (Copy_u8Direction << Copy_u8PinID);
     db6:	a1 e3       	ldi	r26, 0x31	; 49
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e1 e3       	ldi	r30, 0x31	; 49
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	b9 01       	movw	r22, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_enuSetPinDirection+0x1b2>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	8a 95       	dec	r24
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_enuSetPinDirection+0x1ae>
     dda:	cb 01       	movw	r24, r22
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
     de0:	19 82       	std	Y+1, r1	; 0x01
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dea:	26 96       	adiw	r28, 0x06	; 6
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Value)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <DIO_enuSetPinValue+0x6>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <DIO_enuSetPinValue+0x8>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <DIO_enuSetPinValue+0xa>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	8a 83       	std	Y+2, r24	; 0x02
     e0c:	6b 83       	std	Y+3, r22	; 0x03
     e0e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	08 f0       	brcs	.+2      	; 0xe1c <DIO_enuSetPinValue+0x20>
     e1a:	d3 c0       	rjmp	.+422    	; 0xfc2 <DIO_enuSetPinValue+0x1c6>
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	88 30       	cpi	r24, 0x08	; 8
     e20:	08 f0       	brcs	.+2      	; 0xe24 <DIO_enuSetPinValue+0x28>
     e22:	cf c0       	rjmp	.+414    	; 0xfc2 <DIO_enuSetPinValue+0x1c6>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	20 f0       	brcs	.+8      	; 0xe32 <DIO_enuSetPinValue+0x36>
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	08 f0       	brcs	.+2      	; 0xe32 <DIO_enuSetPinValue+0x36>
     e30:	c8 c0       	rjmp	.+400    	; 0xfc2 <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH
					|| Copy_u8Value <= DIO_u8PULL_UP)
	)
	{
		switch (Copy_u8GroupID)
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3e 83       	std	Y+6, r19	; 0x06
     e3a:	2d 83       	std	Y+5, r18	; 0x05
     e3c:	6d 81       	ldd	r22, Y+5	; 0x05
     e3e:	7e 81       	ldd	r23, Y+6	; 0x06
     e40:	61 30       	cpi	r22, 0x01	; 1
     e42:	71 05       	cpc	r23, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <DIO_enuSetPinValue+0x4c>
     e46:	41 c0       	rjmp	.+130    	; 0xeca <DIO_enuSetPinValue+0xce>
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	91 05       	cpc	r25, r1
     e50:	34 f4       	brge	.+12     	; 0xe5e <DIO_enuSetPinValue+0x62>
     e52:	2d 81       	ldd	r18, Y+5	; 0x05
     e54:	3e 81       	ldd	r19, Y+6	; 0x06
     e56:	21 15       	cp	r18, r1
     e58:	31 05       	cpc	r19, r1
     e5a:	71 f0       	breq	.+28     	; 0xe78 <DIO_enuSetPinValue+0x7c>
     e5c:	b0 c0       	rjmp	.+352    	; 0xfbe <DIO_enuSetPinValue+0x1c2>
     e5e:	6d 81       	ldd	r22, Y+5	; 0x05
     e60:	7e 81       	ldd	r23, Y+6	; 0x06
     e62:	62 30       	cpi	r22, 0x02	; 2
     e64:	71 05       	cpc	r23, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <DIO_enuSetPinValue+0x6e>
     e68:	59 c0       	rjmp	.+178    	; 0xf1c <DIO_enuSetPinValue+0x120>
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	83 30       	cpi	r24, 0x03	; 3
     e70:	91 05       	cpc	r25, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <DIO_enuSetPinValue+0x7a>
     e74:	7c c0       	rjmp	.+248    	; 0xf6e <DIO_enuSetPinValue+0x172>
     e76:	a3 c0       	rjmp	.+326    	; 0xfbe <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~ (DIO_BIT_MASK << Copy_u8PinID);
     e78:	ab e3       	ldi	r26, 0x3B	; 59
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	eb e3       	ldi	r30, 0x3B	; 59
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_enuSetPinValue+0x98>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	2a 95       	dec	r18
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_enuSetPinValue+0x94>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
			PORTA |=   (Copy_u8Value << Copy_u8PinID);
     e9e:	ab e3       	ldi	r26, 0x3B	; 59
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e3       	ldi	r30, 0x3B	; 59
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	b9 01       	movw	r22, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_enuSetPinValue+0xc2>
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	8a 95       	dec	r24
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_enuSetPinValue+0xbe>
     ec2:	cb 01       	movw	r24, r22
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	7a c0       	rjmp	.+244    	; 0xfbe <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~ (DIO_BIT_MASK << Copy_u8PinID);
     eca:	a8 e3       	ldi	r26, 0x38	; 56
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e8 e3       	ldi	r30, 0x38	; 56
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_enuSetPinValue+0xea>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	2a 95       	dec	r18
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_enuSetPinValue+0xe6>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
			PORTB |=   (Copy_u8Value << Copy_u8PinID);
     ef0:	a8 e3       	ldi	r26, 0x38	; 56
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e8 e3       	ldi	r30, 0x38	; 56
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	b9 01       	movw	r22, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_enuSetPinValue+0x114>
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	8a 95       	dec	r24
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_enuSetPinValue+0x110>
     f14:	cb 01       	movw	r24, r22
     f16:	84 2b       	or	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	51 c0       	rjmp	.+162    	; 0xfbe <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~ (DIO_BIT_MASK << Copy_u8PinID);
     f1c:	a5 e3       	ldi	r26, 0x35	; 53
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e3       	ldi	r30, 0x35	; 53
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_enuSetPinValue+0x13c>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	2a 95       	dec	r18
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_enuSetPinValue+0x138>
     f3c:	80 95       	com	r24
     f3e:	84 23       	and	r24, r20
     f40:	8c 93       	st	X, r24
			PORTC |=   (Copy_u8Value << Copy_u8PinID);
     f42:	a5 e3       	ldi	r26, 0x35	; 53
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e3       	ldi	r30, 0x35	; 53
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	b9 01       	movw	r22, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_enuSetPinValue+0x166>
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	8a 95       	dec	r24
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_enuSetPinValue+0x162>
     f66:	cb 01       	movw	r24, r22
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	28 c0       	rjmp	.+80     	; 0xfbe <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~ (DIO_BIT_MASK << Copy_u8PinID);
     f6e:	a2 e3       	ldi	r26, 0x32	; 50
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e2 e3       	ldi	r30, 0x32	; 50
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_enuSetPinValue+0x18e>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	2a 95       	dec	r18
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_enuSetPinValue+0x18a>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
			PORTD |=   (Copy_u8Value << Copy_u8PinID);
     f94:	a2 e3       	ldi	r26, 0x32	; 50
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e2 e3       	ldi	r30, 0x32	; 50
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	b9 01       	movw	r22, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_enuSetPinValue+0x1b8>
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	8a 95       	dec	r24
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_enuSetPinValue+0x1b4>
     fb8:	cb 01       	movw	r24, r22
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
     fbe:	19 82       	std	Y+1, r1	; 0x01
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc8:	26 96       	adiw	r28, 0x06	; 6
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <DIO_enuTogglePinValue+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <DIO_enuTogglePinValue+0x8>
     fe2:	0f 92       	push	r0
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	8a 83       	std	Y+2, r24	; 0x02
     fea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <DIO_enuTogglePinValue+0x1e>
     ff6:	73 c0       	rjmp	.+230    	; 0x10de <DIO_enuTogglePinValue+0x104>
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 30       	cpi	r24, 0x08	; 8
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <DIO_enuTogglePinValue+0x26>
     ffe:	6f c0       	rjmp	.+222    	; 0x10de <DIO_enuTogglePinValue+0x104>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	3d 83       	std	Y+5, r19	; 0x05
    1008:	2c 83       	std	Y+4, r18	; 0x04
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	91 05       	cpc	r25, r1
    1012:	49 f1       	breq	.+82     	; 0x1066 <DIO_enuTogglePinValue+0x8c>
    1014:	2c 81       	ldd	r18, Y+4	; 0x04
    1016:	3d 81       	ldd	r19, Y+5	; 0x05
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	2c f4       	brge	.+10     	; 0x1028 <DIO_enuTogglePinValue+0x4e>
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	61 f0       	breq	.+24     	; 0x103e <DIO_enuTogglePinValue+0x64>
    1026:	5d c0       	rjmp	.+186    	; 0x10e2 <DIO_enuTogglePinValue+0x108>
    1028:	2c 81       	ldd	r18, Y+4	; 0x04
    102a:	3d 81       	ldd	r19, Y+5	; 0x05
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	71 f1       	breq	.+92     	; 0x108e <DIO_enuTogglePinValue+0xb4>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	91 05       	cpc	r25, r1
    103a:	e9 f1       	breq	.+122    	; 0x10b6 <DIO_enuTogglePinValue+0xdc>
    103c:	52 c0       	rjmp	.+164    	; 0x10e2 <DIO_enuTogglePinValue+0x108>
		{
		case DIO_u8GROUP_A:
			PORTA ^= (DIO_BIT_MASK << Copy_u8PinID);
    103e:	ab e3       	ldi	r26, 0x3B	; 59
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	eb e3       	ldi	r30, 0x3B	; 59
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_enuTogglePinValue+0x82>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_enuTogglePinValue+0x7e>
    1060:	84 27       	eor	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	3e c0       	rjmp	.+124    	; 0x10e2 <DIO_enuTogglePinValue+0x108>
			break;
		case DIO_u8GROUP_B:
			PORTB ^= (DIO_BIT_MASK << Copy_u8PinID);
    1066:	a8 e3       	ldi	r26, 0x38	; 56
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 e3       	ldi	r30, 0x38	; 56
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_enuTogglePinValue+0xaa>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_enuTogglePinValue+0xa6>
    1088:	84 27       	eor	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	2a c0       	rjmp	.+84     	; 0x10e2 <DIO_enuTogglePinValue+0x108>
			break;
		case DIO_u8GROUP_C:
			PORTC ^= (DIO_BIT_MASK << Copy_u8PinID);
    108e:	a5 e3       	ldi	r26, 0x35	; 53
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e3       	ldi	r30, 0x35	; 53
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_enuTogglePinValue+0xd2>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_enuTogglePinValue+0xce>
    10b0:	84 27       	eor	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	16 c0       	rjmp	.+44     	; 0x10e2 <DIO_enuTogglePinValue+0x108>
			break;
		case DIO_u8GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinID);
    10b6:	a2 e3       	ldi	r26, 0x32	; 50
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e2 e3       	ldi	r30, 0x32	; 50
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_enuTogglePinValue+0xfa>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_enuTogglePinValue+0xf6>
    10d8:	84 27       	eor	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_enuTogglePinValue+0x108>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	27 97       	sbiw	r28, 0x07	; 7
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	6b 83       	std	Y+3, r22	; 0x03
    110c:	5d 83       	std	Y+5, r21	; 0x05
    110e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_enuGetPinValue+0x2a>
    111c:	7c c0       	rjmp	.+248    	; 0x1216 <DIO_enuGetPinValue+0x122>
	{
		if (Copy_u8GroupID <=DIO_u8GROUP_D  &&
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	08 f0       	brcs	.+2      	; 0x1126 <DIO_enuGetPinValue+0x32>
    1124:	75 c0       	rjmp	.+234    	; 0x1210 <DIO_enuGetPinValue+0x11c>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	08 f0       	brcs	.+2      	; 0x112e <DIO_enuGetPinValue+0x3a>
    112c:	71 c0       	rjmp	.+226    	; 0x1210 <DIO_enuGetPinValue+0x11c>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3f 83       	std	Y+7, r19	; 0x07
    1136:	2e 83       	std	Y+6, r18	; 0x06
    1138:	4e 81       	ldd	r20, Y+6	; 0x06
    113a:	5f 81       	ldd	r21, Y+7	; 0x07
    113c:	41 30       	cpi	r20, 0x01	; 1
    113e:	51 05       	cpc	r21, r1
    1140:	59 f1       	breq	.+86     	; 0x1198 <DIO_enuGetPinValue+0xa4>
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	9f 81       	ldd	r25, Y+7	; 0x07
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	91 05       	cpc	r25, r1
    114a:	34 f4       	brge	.+12     	; 0x1158 <DIO_enuGetPinValue+0x64>
    114c:	2e 81       	ldd	r18, Y+6	; 0x06
    114e:	3f 81       	ldd	r19, Y+7	; 0x07
    1150:	21 15       	cp	r18, r1
    1152:	31 05       	cpc	r19, r1
    1154:	69 f0       	breq	.+26     	; 0x1170 <DIO_enuGetPinValue+0x7c>
    1156:	61 c0       	rjmp	.+194    	; 0x121a <DIO_enuGetPinValue+0x126>
    1158:	4e 81       	ldd	r20, Y+6	; 0x06
    115a:	5f 81       	ldd	r21, Y+7	; 0x07
    115c:	42 30       	cpi	r20, 0x02	; 2
    115e:	51 05       	cpc	r21, r1
    1160:	79 f1       	breq	.+94     	; 0x11c0 <DIO_enuGetPinValue+0xcc>
    1162:	8e 81       	ldd	r24, Y+6	; 0x06
    1164:	9f 81       	ldd	r25, Y+7	; 0x07
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <DIO_enuGetPinValue+0x7a>
    116c:	3d c0       	rjmp	.+122    	; 0x11e8 <DIO_enuGetPinValue+0xf4>
    116e:	55 c0       	rjmp	.+170    	; 0x121a <DIO_enuGetPinValue+0x126>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( (PINA >> Copy_u8PinID) & DIO_BIT_MASK );
    1170:	e9 e3       	ldi	r30, 0x39	; 57
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_enuGetPinValue+0x94>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_enuGetPinValue+0x90>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	ec 81       	ldd	r30, Y+4	; 0x04
    1192:	fd 81       	ldd	r31, Y+5	; 0x05
    1194:	80 83       	st	Z, r24
    1196:	41 c0       	rjmp	.+130    	; 0x121a <DIO_enuGetPinValue+0x126>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( (PINB >> Copy_u8PinID) & DIO_BIT_MASK );
    1198:	e6 e3       	ldi	r30, 0x36	; 54
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_enuGetPinValue+0xbc>
    11ac:	55 95       	asr	r21
    11ae:	47 95       	ror	r20
    11b0:	8a 95       	dec	r24
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_enuGetPinValue+0xb8>
    11b4:	ca 01       	movw	r24, r20
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ba:	fd 81       	ldd	r31, Y+5	; 0x05
    11bc:	80 83       	st	Z, r24
    11be:	2d c0       	rjmp	.+90     	; 0x121a <DIO_enuGetPinValue+0x126>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( (PINC >> Copy_u8PinID) & DIO_BIT_MASK );
    11c0:	e3 e3       	ldi	r30, 0x33	; 51
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_enuGetPinValue+0xe4>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_enuGetPinValue+0xe0>
    11dc:	ca 01       	movw	r24, r20
    11de:	81 70       	andi	r24, 0x01	; 1
    11e0:	ec 81       	ldd	r30, Y+4	; 0x04
    11e2:	fd 81       	ldd	r31, Y+5	; 0x05
    11e4:	80 83       	st	Z, r24
    11e6:	19 c0       	rjmp	.+50     	; 0x121a <DIO_enuGetPinValue+0x126>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( (PIND >> Copy_u8PinID) & DIO_BIT_MASK );
    11e8:	e0 e3       	ldi	r30, 0x30	; 48
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_enuGetPinValue+0x10c>
    11fc:	55 95       	asr	r21
    11fe:	47 95       	ror	r20
    1200:	8a 95       	dec	r24
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_enuGetPinValue+0x108>
    1204:	ca 01       	movw	r24, r20
    1206:	81 70       	andi	r24, 0x01	; 1
    1208:	ec 81       	ldd	r30, Y+4	; 0x04
    120a:	fd 81       	ldd	r31, Y+5	; 0x05
    120c:	80 83       	st	Z, r24
    120e:	05 c0       	rjmp	.+10     	; 0x121a <DIO_enuGetPinValue+0x126>
				break;
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_enuGetPinValue+0x126>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
}
    121c:	27 96       	adiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <LCD_enuInit>:

#include <util\delay.h>


ES_t LCD_enuInit(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	ab 97       	sbiw	r28, 0x2b	; 43
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	8b a7       	std	Y+43, r24	; 0x2b
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	ac e0       	ldi	r26, 0x0C	; 12
    124c:	b2 e4       	ldi	r27, 0x42	; 66
    124e:	8f a3       	std	Y+39, r24	; 0x27
    1250:	98 a7       	std	Y+40, r25	; 0x28
    1252:	a9 a7       	std	Y+41, r26	; 0x29
    1254:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1256:	6f a1       	ldd	r22, Y+39	; 0x27
    1258:	78 a5       	ldd	r23, Y+40	; 0x28
    125a:	89 a5       	ldd	r24, Y+41	; 0x29
    125c:	9a a5       	ldd	r25, Y+42	; 0x2a
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	4a e7       	ldi	r20, 0x7A	; 122
    1264:	55 e4       	ldi	r21, 0x45	; 69
    1266:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	8b a3       	std	Y+35, r24	; 0x23
    1270:	9c a3       	std	Y+36, r25	; 0x24
    1272:	ad a3       	std	Y+37, r26	; 0x25
    1274:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1276:	6b a1       	ldd	r22, Y+35	; 0x23
    1278:	7c a1       	ldd	r23, Y+36	; 0x24
    127a:	8d a1       	ldd	r24, Y+37	; 0x25
    127c:	9e a1       	ldd	r25, Y+38	; 0x26
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e8       	ldi	r20, 0x80	; 128
    1284:	5f e3       	ldi	r21, 0x3F	; 63
    1286:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    128a:	88 23       	and	r24, r24
    128c:	2c f4       	brge	.+10     	; 0x1298 <LCD_enuInit+0x6a>
		__ticks = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
    1296:	3f c0       	rjmp	.+126    	; 0x1316 <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    1298:	6b a1       	ldd	r22, Y+35	; 0x23
    129a:	7c a1       	ldd	r23, Y+36	; 0x24
    129c:	8d a1       	ldd	r24, Y+37	; 0x25
    129e:	9e a1       	ldd	r25, Y+38	; 0x26
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	3f ef       	ldi	r19, 0xFF	; 255
    12a4:	4f e7       	ldi	r20, 0x7F	; 127
    12a6:	57 e4       	ldi	r21, 0x47	; 71
    12a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12ac:	18 16       	cp	r1, r24
    12ae:	4c f5       	brge	.+82     	; 0x1302 <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b0:	6f a1       	ldd	r22, Y+39	; 0x27
    12b2:	78 a5       	ldd	r23, Y+40	; 0x28
    12b4:	89 a5       	ldd	r24, Y+41	; 0x29
    12b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e2       	ldi	r20, 0x20	; 32
    12be:	51 e4       	ldi	r21, 0x41	; 65
    12c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	9a a3       	std	Y+34, r25	; 0x22
    12d6:	89 a3       	std	Y+33, r24	; 0x21
    12d8:	0f c0       	rjmp	.+30     	; 0x12f8 <LCD_enuInit+0xca>
    12da:	80 e9       	ldi	r24, 0x90	; 144
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	98 a3       	std	Y+32, r25	; 0x20
    12e0:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12e4:	98 a1       	ldd	r25, Y+32	; 0x20
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <LCD_enuInit+0xb8>
    12ea:	98 a3       	std	Y+32, r25	; 0x20
    12ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ee:	89 a1       	ldd	r24, Y+33	; 0x21
    12f0:	9a a1       	ldd	r25, Y+34	; 0x22
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	9a a3       	std	Y+34, r25	; 0x22
    12f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f8:	89 a1       	ldd	r24, Y+33	; 0x21
    12fa:	9a a1       	ldd	r25, Y+34	; 0x22
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	69 f7       	brne	.-38     	; 0x12da <LCD_enuInit+0xac>
    1300:	14 c0       	rjmp	.+40     	; 0x132a <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1302:	6b a1       	ldd	r22, Y+35	; 0x23
    1304:	7c a1       	ldd	r23, Y+36	; 0x24
    1306:	8d a1       	ldd	r24, Y+37	; 0x25
    1308:	9e a1       	ldd	r25, Y+38	; 0x26
    130a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9a a3       	std	Y+34, r25	; 0x22
    1314:	89 a3       	std	Y+33, r24	; 0x21
    1316:	89 a1       	ldd	r24, Y+33	; 0x21
    1318:	9a a1       	ldd	r25, Y+34	; 0x22
    131a:	9e 8f       	std	Y+30, r25	; 0x1e
    131c:	8d 8f       	std	Y+29, r24	; 0x1d
    131e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1320:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <LCD_enuInit+0xf4>
    1326:	9e 8f       	std	Y+30, r25	; 0x1e
    1328:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(35);

	DIO_enuSetPinDirection(RS_GRP, RS_PIN, DIO_u8OUTPUT);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_GRP, RW_PIN, DIO_u8OUTPUT);
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	67 e0       	ldi	r22, 0x07	; 7
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_GRP, EN_PIN, DIO_u8OUTPUT);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	62 e0       	ldi	r22, 0x02	; 2
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP, D7_PIN, DIO_u8OUTPUT);
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	66 e0       	ldi	r22, 0x06	; 6
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP, D6_PIN, DIO_u8OUTPUT);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	65 e0       	ldi	r22, 0x05	; 5
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP, D5_PIN, DIO_u8OUTPUT);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	64 e0       	ldi	r22, 0x04	; 4
    1360:	41 e0       	ldi	r20, 0x01	; 1
    1362:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP, D4_PIN, DIO_u8OUTPUT);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	63 e0       	ldi	r22, 0x03	; 3
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_GRP, D7_PIN,  0  );
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	66 e0       	ldi	r22, 0x06	; 6
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  0  );
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	65 e0       	ldi	r22, 0x05	; 5
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  1  );
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	64 e0       	ldi	r22, 0x04	; 4
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  0  );
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	63 e0       	ldi	r22, 0x03	; 3
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 e2       	ldi	r26, 0x20	; 32
    13b2:	b1 e4       	ldi	r27, 0x41	; 65
    13b4:	89 8f       	std	Y+25, r24	; 0x19
    13b6:	9a 8f       	std	Y+26, r25	; 0x1a
    13b8:	ab 8f       	std	Y+27, r26	; 0x1b
    13ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	69 8d       	ldd	r22, Y+25	; 0x19
    13be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a e7       	ldi	r20, 0x7A	; 122
    13ca:	55 e4       	ldi	r21, 0x45	; 69
    13cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8d 8b       	std	Y+21, r24	; 0x15
    13d6:	9e 8b       	std	Y+22, r25	; 0x16
    13d8:	af 8b       	std	Y+23, r26	; 0x17
    13da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	2c f4       	brge	.+10     	; 0x13fe <LCD_enuInit+0x1d0>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c 8b       	std	Y+20, r25	; 0x14
    13fa:	8b 8b       	std	Y+19, r24	; 0x13
    13fc:	3f c0       	rjmp	.+126    	; 0x147c <LCD_enuInit+0x24e>
	else if (__tmp > 65535)
    13fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1400:	7e 89       	ldd	r23, Y+22	; 0x16
    1402:	8f 89       	ldd	r24, Y+23	; 0x17
    1404:	98 8d       	ldd	r25, Y+24	; 0x18
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	57 e4       	ldi	r21, 0x47	; 71
    140e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1412:	18 16       	cp	r1, r24
    1414:	4c f5       	brge	.+82     	; 0x1468 <LCD_enuInit+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1416:	69 8d       	ldd	r22, Y+25	; 0x19
    1418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9c 8b       	std	Y+20, r25	; 0x14
    143c:	8b 8b       	std	Y+19, r24	; 0x13
    143e:	0f c0       	rjmp	.+30     	; 0x145e <LCD_enuInit+0x230>
    1440:	80 e9       	ldi	r24, 0x90	; 144
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	9a 8b       	std	Y+18, r25	; 0x12
    1446:	89 8b       	std	Y+17, r24	; 0x11
    1448:	89 89       	ldd	r24, Y+17	; 0x11
    144a:	9a 89       	ldd	r25, Y+18	; 0x12
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <LCD_enuInit+0x21e>
    1450:	9a 8b       	std	Y+18, r25	; 0x12
    1452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1454:	8b 89       	ldd	r24, Y+19	; 0x13
    1456:	9c 89       	ldd	r25, Y+20	; 0x14
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9c 8b       	std	Y+20, r25	; 0x14
    145c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	8b 89       	ldd	r24, Y+19	; 0x13
    1460:	9c 89       	ldd	r25, Y+20	; 0x14
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f7       	brne	.-38     	; 0x1440 <LCD_enuInit+0x212>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <LCD_enuInit+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1468:	6d 89       	ldd	r22, Y+21	; 0x15
    146a:	7e 89       	ldd	r23, Y+22	; 0x16
    146c:	8f 89       	ldd	r24, Y+23	; 0x17
    146e:	98 8d       	ldd	r25, Y+24	; 0x18
    1470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9c 8b       	std	Y+20, r25	; 0x14
    147a:	8b 8b       	std	Y+19, r24	; 0x13
    147c:	8b 89       	ldd	r24, Y+19	; 0x13
    147e:	9c 89       	ldd	r25, Y+20	; 0x14
    1480:	98 8b       	std	Y+16, r25	; 0x10
    1482:	8f 87       	std	Y+15, r24	; 0x0f
    1484:	8f 85       	ldd	r24, Y+15	; 0x0f
    1486:	98 89       	ldd	r25, Y+16	; 0x10
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <LCD_enuInit+0x25a>
    148c:	98 8b       	std	Y+16, r25	; 0x10
    148e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a0 e2       	ldi	r26, 0x20	; 32
    14a0:	b1 e4       	ldi	r27, 0x41	; 65
    14a2:	8b 87       	std	Y+11, r24	; 0x0b
    14a4:	9c 87       	std	Y+12, r25	; 0x0c
    14a6:	ad 87       	std	Y+13, r26	; 0x0d
    14a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	4a e7       	ldi	r20, 0x7A	; 122
    14b8:	55 e4       	ldi	r21, 0x45	; 69
    14ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	8f 83       	std	Y+7, r24	; 0x07
    14c4:	98 87       	std	Y+8, r25	; 0x08
    14c6:	a9 87       	std	Y+9, r26	; 0x09
    14c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ca:	6f 81       	ldd	r22, Y+7	; 0x07
    14cc:	78 85       	ldd	r23, Y+8	; 0x08
    14ce:	89 85       	ldd	r24, Y+9	; 0x09
    14d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14de:	88 23       	and	r24, r24
    14e0:	2c f4       	brge	.+10     	; 0x14ec <LCD_enuInit+0x2be>
		__ticks = 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
    14ea:	3f c0       	rjmp	.+126    	; 0x156a <LCD_enuInit+0x33c>
	else if (__tmp > 65535)
    14ec:	6f 81       	ldd	r22, Y+7	; 0x07
    14ee:	78 85       	ldd	r23, Y+8	; 0x08
    14f0:	89 85       	ldd	r24, Y+9	; 0x09
    14f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	3f ef       	ldi	r19, 0xFF	; 255
    14f8:	4f e7       	ldi	r20, 0x7F	; 127
    14fa:	57 e4       	ldi	r21, 0x47	; 71
    14fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1500:	18 16       	cp	r1, r24
    1502:	4c f5       	brge	.+82     	; 0x1556 <LCD_enuInit+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	6b 85       	ldd	r22, Y+11	; 0x0b
    1506:	7c 85       	ldd	r23, Y+12	; 0x0c
    1508:	8d 85       	ldd	r24, Y+13	; 0x0d
    150a:	9e 85       	ldd	r25, Y+14	; 0x0e
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e2       	ldi	r20, 0x20	; 32
    1512:	51 e4       	ldi	r21, 0x41	; 65
    1514:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	0f c0       	rjmp	.+30     	; 0x154c <LCD_enuInit+0x31e>
    152e:	80 e9       	ldi	r24, 0x90	; 144
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <LCD_enuInit+0x30c>
    153e:	9c 83       	std	Y+4, r25	; 0x04
    1540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	69 f7       	brne	.-38     	; 0x152e <LCD_enuInit+0x300>
    1554:	14 c0       	rjmp	.+40     	; 0x157e <LCD_enuInit+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1556:	6f 81       	ldd	r22, Y+7	; 0x07
    1558:	78 85       	ldd	r23, Y+8	; 0x08
    155a:	89 85       	ldd	r24, Y+9	; 0x09
    155c:	9a 85       	ldd	r25, Y+10	; 0x0a
    155e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <LCD_enuInit+0x348>
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	LCD_enuWriteNLatch(0x28);
    157e:	88 e2       	ldi	r24, 0x28	; 40
    1580:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>
#else
#error "LCD Mode Configuration is wrong\n it must be EIGHT_BIT or FOUR_BIT"
#endif

	//display on/off
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0F);
    158e:	8f e0       	ldi	r24, 0x0F	; 15
    1590:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>

	//clear display
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>

	//Entry set mode
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    15ae:	86 e0       	ldi	r24, 0x06	; 6
    15b0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    15b4:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    15b6:	ab 96       	adiw	r28, 0x2b	; 43
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <LCD_enuWriteData+0x6>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	LCD_enuWriteNLatch (Copy_u8Data);
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Command)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <LCD_enuWriteCommand+0x6>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Command);
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString )
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <LCD_enuWriteString+0x6>
    1626:	0f 92       	push	r0
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pcString != NULL)
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	b9 f0       	breq	.+46     	; 0x166a <LCD_enuWriteString+0x4a>
    163c:	10 c0       	rjmp	.+32     	; 0x165e <LCD_enuWriteString+0x3e>
	{
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
			LCD_enuWriteNLatch (*Copy_pcString++);
    1648:	ea 81       	ldd	r30, Y+2	; 0x02
    164a:	fb 81       	ldd	r31, Y+3	; 0x03
    164c:	20 81       	ld	r18, Z
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	9b 83       	std	Y+3, r25	; 0x03
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	82 2f       	mov	r24, r18
    165a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    165e:	ea 81       	ldd	r30, Y+2	; 0x02
    1660:	fb 81       	ldd	r31, Y+3	; 0x03
    1662:	80 81       	ld	r24, Z
    1664:	88 23       	and	r24, r24
    1666:	59 f7       	brne	.-42     	; 0x163e <LCD_enuWriteString+0x1e>
    1668:	02 c0       	rjmp	.+4      	; 0x166e <LCD_enuWriteString+0x4e>
			LCD_enuWriteNLatch (*Copy_pcString++);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <LCD_enuWriteIntegerNum>:

ES_t LCD_enuWriteIntegerNum(s32 Copy_s32Num)
{
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	62 97       	sbiw	r28, 0x12	; 18
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	6f 87       	std	Y+15, r22	; 0x0f
    1696:	78 8b       	std	Y+16, r23	; 0x10
    1698:	89 8b       	std	Y+17, r24	; 0x11
    169a:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_enuErrorState = ES_NOK;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_Au8Digits[12]={0}, Local_u8Digit = 0;
    16a0:	8c e0       	ldi	r24, 0x0C	; 12
    16a2:	fe 01       	movw	r30, r28
    16a4:	33 96       	adiw	r30, 0x03	; 3
    16a6:	df 01       	movw	r26, r30
    16a8:	98 2f       	mov	r25, r24
    16aa:	1d 92       	st	X+, r1
    16ac:	9a 95       	dec	r25
    16ae:	e9 f7       	brne	.-6      	; 0x16aa <LCD_enuWriteIntegerNum+0x2e>
    16b0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_s32Num==0)
    16b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b4:	98 89       	ldd	r25, Y+16	; 0x10
    16b6:	a9 89       	ldd	r26, Y+17	; 0x11
    16b8:	ba 89       	ldd	r27, Y+18	; 0x12
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	a1 05       	cpc	r26, r1
    16be:	b1 05       	cpc	r27, r1
    16c0:	41 f4       	brne	.+16     	; 0x16d2 <LCD_enuWriteIntegerNum+0x56>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
		LCD_enuWriteNLatch ('0');
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>
	}
	if (Copy_s32Num <0)
    16d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d4:	98 89       	ldd	r25, Y+16	; 0x10
    16d6:	a9 89       	ldd	r26, Y+17	; 0x11
    16d8:	ba 89       	ldd	r27, Y+18	; 0x12
    16da:	bb 23       	and	r27, r27
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <LCD_enuWriteIntegerNum+0x64>
    16de:	46 c0       	rjmp	.+140    	; 0x176c <LCD_enuWriteIntegerNum+0xf0>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
		LCD_enuWriteNLatch ('-');
    16ea:	8d e2       	ldi	r24, 0x2D	; 45
    16ec:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>
		Copy_s32Num *= -1;
    16f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f2:	98 89       	ldd	r25, Y+16	; 0x10
    16f4:	a9 89       	ldd	r26, Y+17	; 0x11
    16f6:	ba 89       	ldd	r27, Y+18	; 0x12
    16f8:	b0 95       	com	r27
    16fa:	a0 95       	com	r26
    16fc:	90 95       	com	r25
    16fe:	81 95       	neg	r24
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	af 4f       	sbci	r26, 0xFF	; 255
    1704:	bf 4f       	sbci	r27, 0xFF	; 255
    1706:	8f 87       	std	Y+15, r24	; 0x0f
    1708:	98 8b       	std	Y+16, r25	; 0x10
    170a:	a9 8b       	std	Y+17, r26	; 0x11
    170c:	ba 8b       	std	Y+18, r27	; 0x12
    170e:	2e c0       	rjmp	.+92     	; 0x176c <LCD_enuWriteIntegerNum+0xf0>
	}
	while (Copy_s32Num)
	{
		Local_u8Digit ++;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	89 83       	std	Y+1, r24	; 0x01
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	08 2f       	mov	r16, r24
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	8f 85       	ldd	r24, Y+15	; 0x0f
    171e:	98 89       	ldd	r25, Y+16	; 0x10
    1720:	a9 89       	ldd	r26, Y+17	; 0x11
    1722:	ba 89       	ldd	r27, Y+18	; 0x12
    1724:	2a e0       	ldi	r18, 0x0A	; 10
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	28 2f       	mov	r18, r24
    173a:	20 5d       	subi	r18, 0xD0	; 208
    173c:	ce 01       	movw	r24, r28
    173e:	03 96       	adiw	r24, 0x03	; 3
    1740:	fc 01       	movw	r30, r24
    1742:	e0 0f       	add	r30, r16
    1744:	f1 1f       	adc	r31, r17
    1746:	20 83       	st	Z, r18
		Copy_s32Num /=10;
    1748:	8f 85       	ldd	r24, Y+15	; 0x0f
    174a:	98 89       	ldd	r25, Y+16	; 0x10
    174c:	a9 89       	ldd	r26, Y+17	; 0x11
    174e:	ba 89       	ldd	r27, Y+18	; 0x12
    1750:	2a e0       	ldi	r18, 0x0A	; 10
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
    1760:	da 01       	movw	r26, r20
    1762:	c9 01       	movw	r24, r18
    1764:	8f 87       	std	Y+15, r24	; 0x0f
    1766:	98 8b       	std	Y+16, r25	; 0x10
    1768:	a9 8b       	std	Y+17, r26	; 0x11
    176a:	ba 8b       	std	Y+18, r27	; 0x12
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch ('-');
		Copy_s32Num *= -1;
	}
	while (Copy_s32Num)
    176c:	8f 85       	ldd	r24, Y+15	; 0x0f
    176e:	98 89       	ldd	r25, Y+16	; 0x10
    1770:	a9 89       	ldd	r26, Y+17	; 0x11
    1772:	ba 89       	ldd	r27, Y+18	; 0x12
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	a1 05       	cpc	r26, r1
    1778:	b1 05       	cpc	r27, r1
    177a:	51 f6       	brne	.-108    	; 0x1710 <LCD_enuWriteIntegerNum+0x94>
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <LCD_enuWriteIntegerNum+0x12a>
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
		Copy_s32Num /=10;
	}
	while (Local_u8Digit)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
		LCD_enuWriteNLatch (Local_Au8Digits[Local_u8Digit--]);
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	ce 01       	movw	r24, r28
    1790:	03 96       	adiw	r24, 0x03	; 3
    1792:	fc 01       	movw	r30, r24
    1794:	e2 0f       	add	r30, r18
    1796:	f3 1f       	adc	r31, r19
    1798:	90 81       	ld	r25, Z
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	81 50       	subi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	89 2f       	mov	r24, r25
    17a2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>
	{
		Local_u8Digit ++;
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
		Copy_s32Num /=10;
	}
	while (Local_u8Digit)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	88 23       	and	r24, r24
    17aa:	49 f7       	brne	.-46     	; 0x177e <LCD_enuWriteIntegerNum+0x102>
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch (Local_Au8Digits[Local_u8Digit--]);
	}


	return Local_enuErrorState;
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17ae:	62 96       	adiw	r28, 0x12	; 18
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	08 95       	ret

000017c4 <LCD_enuGoToPosition>:
ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Col)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <LCD_enuGoToPosition+0x6>
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	8a 83       	std	Y+2, r24	; 0x02
    17d2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Row >=1 && Copy_u8Row <=2 &&
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	88 23       	and	r24, r24
    17dc:	11 f1       	breq	.+68     	; 0x1822 <LCD_enuGoToPosition+0x5e>
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	f8 f4       	brcc	.+62     	; 0x1822 <LCD_enuGoToPosition+0x5e>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	88 23       	and	r24, r24
    17e8:	e1 f0       	breq	.+56     	; 0x1822 <LCD_enuGoToPosition+0x5e>
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	81 31       	cpi	r24, 0x11	; 17
    17ee:	c8 f4       	brcc	.+50     	; 0x1822 <LCD_enuGoToPosition+0x5e>
			Copy_u8Col >=1 && Copy_u8Col <=16 )
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(0x80 + (Copy_u8Row-1)*0x40 + (Copy_u8Col-1));
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	00 24       	eor	r0, r0
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	07 94       	ror	r0
    180a:	96 95       	lsr	r25
    180c:	87 95       	ror	r24
    180e:	07 94       	ror	r0
    1810:	98 2f       	mov	r25, r24
    1812:	80 2d       	mov	r24, r0
    1814:	98 2f       	mov	r25, r24
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	89 0f       	add	r24, r25
    181a:	81 50       	subi	r24, 0x01	; 1
    181c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_enuWriteNLatch>
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <LCD_enuGoToPosition+0x62>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch (u8 Copy_u8Byte)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	ea 97       	sbiw	r28, 0x3a	; 58
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	8a af       	std	Y+58, r24	; 0x3a
	ES_t Local_enuErrorState = ES_NOK;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 af       	std	Y+57, r24	; 0x39

	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	67 e0       	ldi	r22, 0x07	; 7
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
	_delay_ms(10);

#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP, D7_PIN,  ((Copy_u8Byte>>7)&1)  );
    1862:	8a ad       	ldd	r24, Y+58	; 0x3a
    1864:	98 2f       	mov	r25, r24
    1866:	99 1f       	adc	r25, r25
    1868:	99 27       	eor	r25, r25
    186a:	99 1f       	adc	r25, r25
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	66 e0       	ldi	r22, 0x06	; 6
    1870:	49 2f       	mov	r20, r25
    1872:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  ((Copy_u8Byte>>6)&1)  );
    1876:	8a ad       	ldd	r24, Y+58	; 0x3a
    1878:	82 95       	swap	r24
    187a:	86 95       	lsr	r24
    187c:	86 95       	lsr	r24
    187e:	83 70       	andi	r24, 0x03	; 3
    1880:	98 2f       	mov	r25, r24
    1882:	91 70       	andi	r25, 0x01	; 1
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	65 e0       	ldi	r22, 0x05	; 5
    1888:	49 2f       	mov	r20, r25
    188a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  ((Copy_u8Byte>>5)&1)  );
    188e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1890:	82 95       	swap	r24
    1892:	86 95       	lsr	r24
    1894:	87 70       	andi	r24, 0x07	; 7
    1896:	98 2f       	mov	r25, r24
    1898:	91 70       	andi	r25, 0x01	; 1
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	64 e0       	ldi	r22, 0x04	; 4
    189e:	49 2f       	mov	r20, r25
    18a0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  ((Copy_u8Byte>>4)&1)  );
    18a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    18a6:	82 95       	swap	r24
    18a8:	8f 70       	andi	r24, 0x0F	; 15
    18aa:	98 2f       	mov	r25, r24
    18ac:	91 70       	andi	r25, 0x01	; 1
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	63 e0       	ldi	r22, 0x03	; 3
    18b2:	49 2f       	mov	r20, r25
    18b4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e2       	ldi	r26, 0x20	; 32
    18c8:	b1 e4       	ldi	r27, 0x41	; 65
    18ca:	8d ab       	std	Y+53, r24	; 0x35
    18cc:	9e ab       	std	Y+54, r25	; 0x36
    18ce:	af ab       	std	Y+55, r26	; 0x37
    18d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6d a9       	ldd	r22, Y+53	; 0x35
    18d4:	7e a9       	ldd	r23, Y+54	; 0x36
    18d6:	8f a9       	ldd	r24, Y+55	; 0x37
    18d8:	98 ad       	ldd	r25, Y+56	; 0x38
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a e7       	ldi	r20, 0x7A	; 122
    18e0:	55 e4       	ldi	r21, 0x45	; 69
    18e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	89 ab       	std	Y+49, r24	; 0x31
    18ec:	9a ab       	std	Y+50, r25	; 0x32
    18ee:	ab ab       	std	Y+51, r26	; 0x33
    18f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18f2:	69 a9       	ldd	r22, Y+49	; 0x31
    18f4:	7a a9       	ldd	r23, Y+50	; 0x32
    18f6:	8b a9       	ldd	r24, Y+51	; 0x33
    18f8:	9c a9       	ldd	r25, Y+52	; 0x34
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_enuWriteNLatch+0xe0>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	98 ab       	std	Y+48, r25	; 0x30
    1910:	8f a7       	std	Y+47, r24	; 0x2f
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_enuWriteNLatch+0x15e>
	else if (__tmp > 65535)
    1914:	69 a9       	ldd	r22, Y+49	; 0x31
    1916:	7a a9       	ldd	r23, Y+50	; 0x32
    1918:	8b a9       	ldd	r24, Y+51	; 0x33
    191a:	9c a9       	ldd	r25, Y+52	; 0x34
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_enuWriteNLatch+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6d a9       	ldd	r22, Y+53	; 0x35
    192e:	7e a9       	ldd	r23, Y+54	; 0x36
    1930:	8f a9       	ldd	r24, Y+55	; 0x37
    1932:	98 ad       	ldd	r25, Y+56	; 0x38
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	98 ab       	std	Y+48, r25	; 0x30
    1952:	8f a7       	std	Y+47, r24	; 0x2f
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_enuWriteNLatch+0x140>
    1956:	80 e9       	ldi	r24, 0x90	; 144
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	9e a7       	std	Y+46, r25	; 0x2e
    195c:	8d a7       	std	Y+45, r24	; 0x2d
    195e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1960:	9e a5       	ldd	r25, Y+46	; 0x2e
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_enuWriteNLatch+0x12e>
    1966:	9e a7       	std	Y+46, r25	; 0x2e
    1968:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8f a5       	ldd	r24, Y+47	; 0x2f
    196c:	98 a9       	ldd	r25, Y+48	; 0x30
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	98 ab       	std	Y+48, r25	; 0x30
    1972:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8f a5       	ldd	r24, Y+47	; 0x2f
    1976:	98 a9       	ldd	r25, Y+48	; 0x30
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_enuWriteNLatch+0x122>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <LCD_enuWriteNLatch+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	69 a9       	ldd	r22, Y+49	; 0x31
    1980:	7a a9       	ldd	r23, Y+50	; 0x32
    1982:	8b a9       	ldd	r24, Y+51	; 0x33
    1984:	9c a9       	ldd	r25, Y+52	; 0x34
    1986:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	98 ab       	std	Y+48, r25	; 0x30
    1990:	8f a7       	std	Y+47, r24	; 0x2f
    1992:	8f a5       	ldd	r24, Y+47	; 0x2f
    1994:	98 a9       	ldd	r25, Y+48	; 0x30
    1996:	9c a7       	std	Y+44, r25	; 0x2c
    1998:	8b a7       	std	Y+43, r24	; 0x2b
    199a:	8b a5       	ldd	r24, Y+43	; 0x2b
    199c:	9c a5       	ldd	r25, Y+44	; 0x2c
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_enuWriteNLatch+0x16a>
    19a2:	9c a7       	std	Y+44, r25	; 0x2c
    19a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e2       	ldi	r26, 0x20	; 32
    19b6:	b1 e4       	ldi	r27, 0x41	; 65
    19b8:	8f a3       	std	Y+39, r24	; 0x27
    19ba:	98 a7       	std	Y+40, r25	; 0x28
    19bc:	a9 a7       	std	Y+41, r26	; 0x29
    19be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6f a1       	ldd	r22, Y+39	; 0x27
    19c2:	78 a5       	ldd	r23, Y+40	; 0x28
    19c4:	89 a5       	ldd	r24, Y+41	; 0x29
    19c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a e7       	ldi	r20, 0x7A	; 122
    19ce:	55 e4       	ldi	r21, 0x45	; 69
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8b a3       	std	Y+35, r24	; 0x23
    19da:	9c a3       	std	Y+36, r25	; 0x24
    19dc:	ad a3       	std	Y+37, r26	; 0x25
    19de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19e0:	6b a1       	ldd	r22, Y+35	; 0x23
    19e2:	7c a1       	ldd	r23, Y+36	; 0x24
    19e4:	8d a1       	ldd	r24, Y+37	; 0x25
    19e6:	9e a1       	ldd	r25, Y+38	; 0x26
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_enuWriteNLatch+0x1ce>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9a a3       	std	Y+34, r25	; 0x22
    19fe:	89 a3       	std	Y+33, r24	; 0x21
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_enuWriteNLatch+0x24c>
	else if (__tmp > 65535)
    1a02:	6b a1       	ldd	r22, Y+35	; 0x23
    1a04:	7c a1       	ldd	r23, Y+36	; 0x24
    1a06:	8d a1       	ldd	r24, Y+37	; 0x25
    1a08:	9e a1       	ldd	r25, Y+38	; 0x26
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_enuWriteNLatch+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9a a3       	std	Y+34, r25	; 0x22
    1a40:	89 a3       	std	Y+33, r24	; 0x21
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_enuWriteNLatch+0x22e>
    1a44:	80 e9       	ldi	r24, 0x90	; 144
    1a46:	91 e0       	ldi	r25, 0x01	; 1
    1a48:	98 a3       	std	Y+32, r25	; 0x20
    1a4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a4e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_enuWriteNLatch+0x21c>
    1a54:	98 a3       	std	Y+32, r25	; 0x20
    1a56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9a a3       	std	Y+34, r25	; 0x22
    1a60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	89 a1       	ldd	r24, Y+33	; 0x21
    1a64:	9a a1       	ldd	r25, Y+34	; 0x22
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_enuWriteNLatch+0x210>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_enuWriteNLatch+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a70:	8d a1       	ldd	r24, Y+37	; 0x25
    1a72:	9e a1       	ldd	r25, Y+38	; 0x26
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9a a3       	std	Y+34, r25	; 0x22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
    1a80:	89 a1       	ldd	r24, Y+33	; 0x21
    1a82:	9a a1       	ldd	r25, Y+34	; 0x22
    1a84:	9e 8f       	std	Y+30, r25	; 0x1e
    1a86:	8d 8f       	std	Y+29, r24	; 0x1d
    1a88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_enuWriteNLatch+0x258>
    1a90:	9e 8f       	std	Y+30, r25	; 0x1e
    1a92:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	DIO_enuSetPinValue(D7_GRP, D7_PIN,  ((Copy_u8Byte>>3)&1)  );
    1a94:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a96:	86 95       	lsr	r24
    1a98:	86 95       	lsr	r24
    1a9a:	86 95       	lsr	r24
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	91 70       	andi	r25, 0x01	; 1
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	66 e0       	ldi	r22, 0x06	; 6
    1aa4:	49 2f       	mov	r20, r25
    1aa6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  ((Copy_u8Byte>>2)&1)  );
    1aaa:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aac:	86 95       	lsr	r24
    1aae:	86 95       	lsr	r24
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	91 70       	andi	r25, 0x01	; 1
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	65 e0       	ldi	r22, 0x05	; 5
    1ab8:	49 2f       	mov	r20, r25
    1aba:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  ((Copy_u8Byte>>1)&1)  );
    1abe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ac0:	86 95       	lsr	r24
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	91 70       	andi	r25, 0x01	; 1
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	64 e0       	ldi	r22, 0x04	; 4
    1aca:	49 2f       	mov	r20, r25
    1acc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  ((Copy_u8Byte>>0)&1)  );
    1ad0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ad2:	98 2f       	mov	r25, r24
    1ad4:	91 70       	andi	r25, 0x01	; 1
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	63 e0       	ldi	r22, 0x03	; 3
    1ada:	49 2f       	mov	r20, r25
    1adc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a0 e2       	ldi	r26, 0x20	; 32
    1af0:	b1 e4       	ldi	r27, 0x41	; 65
    1af2:	89 8f       	std	Y+25, r24	; 0x19
    1af4:	9a 8f       	std	Y+26, r25	; 0x1a
    1af6:	ab 8f       	std	Y+27, r26	; 0x1b
    1af8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	69 8d       	ldd	r22, Y+25	; 0x19
    1afc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	4a e7       	ldi	r20, 0x7A	; 122
    1b08:	55 e4       	ldi	r21, 0x45	; 69
    1b0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	8d 8b       	std	Y+21, r24	; 0x15
    1b14:	9e 8b       	std	Y+22, r25	; 0x16
    1b16:	af 8b       	std	Y+23, r26	; 0x17
    1b18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b20:	98 8d       	ldd	r25, Y+24	; 0x18
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e8       	ldi	r20, 0x80	; 128
    1b28:	5f e3       	ldi	r21, 0x3F	; 63
    1b2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b2e:	88 23       	and	r24, r24
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <LCD_enuWriteNLatch+0x308>
		__ticks = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9c 8b       	std	Y+20, r25	; 0x14
    1b38:	8b 8b       	std	Y+19, r24	; 0x13
    1b3a:	3f c0       	rjmp	.+126    	; 0x1bba <LCD_enuWriteNLatch+0x386>
	else if (__tmp > 65535)
    1b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b40:	8f 89       	ldd	r24, Y+23	; 0x17
    1b42:	98 8d       	ldd	r25, Y+24	; 0x18
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	57 e4       	ldi	r21, 0x47	; 71
    1b4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	4c f5       	brge	.+82     	; 0x1ba6 <LCD_enuWriteNLatch+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	69 8d       	ldd	r22, Y+25	; 0x19
    1b56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9c 8b       	std	Y+20, r25	; 0x14
    1b7a:	8b 8b       	std	Y+19, r24	; 0x13
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <LCD_enuWriteNLatch+0x368>
    1b7e:	80 e9       	ldi	r24, 0x90	; 144
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	9a 8b       	std	Y+18, r25	; 0x12
    1b84:	89 8b       	std	Y+17, r24	; 0x11
    1b86:	89 89       	ldd	r24, Y+17	; 0x11
    1b88:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_enuWriteNLatch+0x356>
    1b8e:	9a 8b       	std	Y+18, r25	; 0x12
    1b90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	8b 89       	ldd	r24, Y+19	; 0x13
    1b94:	9c 89       	ldd	r25, Y+20	; 0x14
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	9c 8b       	std	Y+20, r25	; 0x14
    1b9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	69 f7       	brne	.-38     	; 0x1b7e <LCD_enuWriteNLatch+0x34a>
    1ba4:	14 c0       	rjmp	.+40     	; 0x1bce <LCD_enuWriteNLatch+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    1baa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bac:	98 8d       	ldd	r25, Y+24	; 0x18
    1bae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
    1bba:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbe:	98 8b       	std	Y+16, r25	; 0x10
    1bc0:	8f 87       	std	Y+15, r24	; 0x0f
    1bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc4:	98 89       	ldd	r25, Y+16	; 0x10
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_enuWriteNLatch+0x392>
    1bca:	98 8b       	std	Y+16, r25	; 0x10
    1bcc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	62 e0       	ldi	r22, 0x02	; 2
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e2       	ldi	r26, 0x20	; 32
    1bde:	b1 e4       	ldi	r27, 0x41	; 65
    1be0:	8b 87       	std	Y+11, r24	; 0x0b
    1be2:	9c 87       	std	Y+12, r25	; 0x0c
    1be4:	ad 87       	std	Y+13, r26	; 0x0d
    1be6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	55 e4       	ldi	r21, 0x45	; 69
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8f 83       	std	Y+7, r24	; 0x07
    1c02:	98 87       	std	Y+8, r25	; 0x08
    1c04:	a9 87       	std	Y+9, r26	; 0x09
    1c06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <LCD_enuWriteNLatch+0x3f6>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <LCD_enuWriteNLatch+0x474>
	else if (__tmp > 65535)
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <LCD_enuWriteNLatch+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <LCD_enuWriteNLatch+0x456>
    1c6c:	80 e9       	ldi	r24, 0x90	; 144
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	9c 83       	std	Y+4, r25	; 0x04
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_enuWriteNLatch+0x444>
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <LCD_enuWriteNLatch+0x438>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <LCD_enuWriteNLatch+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_enuWriteNLatch+0x480>
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

#else
#error "LCD Mode Configuration is wrong\n it must be EIGHT_BIT or FOUR_BIT"
#endif
	return Local_enuErrorState;
    1cbc:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1cbe:	ea 96       	adiw	r28, 0x3a	; 58
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <Keypad_enuInit>:
#include "Keypad_priv.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinDirection(C1_GRP , C1_PIN , DIO_u8OUTPUT);
    1cde:	83 e0       	ldi	r24, 0x03	; 3
    1ce0:	62 e0       	ldi	r22, 0x02	; 2
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_GRP , C2_PIN , DIO_u8OUTPUT);
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	63 e0       	ldi	r22, 0x03	; 3
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_GRP , C3_PIN , DIO_u8OUTPUT);
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	64 e0       	ldi	r22, 0x04	; 4
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_GRP , C4_PIN , DIO_u8OUTPUT);
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	65 e0       	ldi	r22, 0x05	; 5
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_GRP , C1_PIN , DIO_u8HIGH);
    1d06:	83 e0       	ldi	r24, 0x03	; 3
    1d08:	62 e0       	ldi	r22, 0x02	; 2
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_GRP , C2_PIN , DIO_u8HIGH);
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	63 e0       	ldi	r22, 0x03	; 3
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_GRP , C3_PIN , DIO_u8HIGH);
    1d1a:	83 e0       	ldi	r24, 0x03	; 3
    1d1c:	64 e0       	ldi	r22, 0x04	; 4
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_GRP , C4_PIN , DIO_u8HIGH);
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	65 e0       	ldi	r22, 0x05	; 5
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(R1_GRP , R1_PIN , DIO_u8INPUT);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	64 e0       	ldi	r22, 0x04	; 4
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_GRP , R2_PIN , DIO_u8INPUT);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	65 e0       	ldi	r22, 0x05	; 5
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_GRP , R3_PIN , DIO_u8INPUT);
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	66 e0       	ldi	r22, 0x06	; 6
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_GRP , R4_PIN , DIO_u8INPUT);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	67 e0       	ldi	r22, 0x07	; 7
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(R1_GRP , R1_PIN , DIO_u8PULL_UP);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	64 e0       	ldi	r22, 0x04	; 4
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_GRP , R2_PIN , DIO_u8PULL_UP);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	65 e0       	ldi	r22, 0x05	; 5
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_GRP , R3_PIN , DIO_u8PULL_UP);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	66 e0       	ldi	r22, 0x06	; 6
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_GRP , R4_PIN , DIO_u8PULL_UP);
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	67 e0       	ldi	r22, 0x07	; 7
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>

	return Local_enuErrorState;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <Keypad_GetPressedKey>:

ES_t Keypad_GetPressedKey(u8 * Copy_pu8KeyValue)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	ea 97       	sbiw	r28, 0x3a	; 58
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	9d ab       	std	Y+53, r25	; 0x35
    1d9e:	8c ab       	std	Y+52, r24	; 0x34
	ES_t Local_enuErrorState =ES_NOK;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	8a 8b       	std	Y+18, r24	; 0x12

	u8 Local_u8RowIter = 0;
    1da4:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColIter = 0;
    1da6:	18 8a       	std	Y+16, r1	; 0x10

	u8 Local_Au8RowGrp[]={R1_GRP, R2_GRP, R3_GRP, R4_GRP};
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	8b 8b       	std	Y+19, r24	; 0x13
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	8c 8b       	std	Y+20, r24	; 0x14
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	8d 8b       	std	Y+21, r24	; 0x15
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_Au8RowPin[]={R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	8f 8b       	std	Y+23, r24	; 0x17
    1dbc:	85 e0       	ldi	r24, 0x05	; 5
    1dbe:	88 8f       	std	Y+24, r24	; 0x18
    1dc0:	86 e0       	ldi	r24, 0x06	; 6
    1dc2:	89 8f       	std	Y+25, r24	; 0x19
    1dc4:	87 e0       	ldi	r24, 0x07	; 7
    1dc6:	8a 8f       	std	Y+26, r24	; 0x1a

	u8 Local_Au8ColGrp[]={C1_GRP, C2_GRP, C3_GRP, C4_GRP};
    1dc8:	83 e0       	ldi	r24, 0x03	; 3
    1dca:	8b 8f       	std	Y+27, r24	; 0x1b
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	8c 8f       	std	Y+28, r24	; 0x1c
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_Au8ColPin[]={C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	8f 8f       	std	Y+31, r24	; 0x1f
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	88 a3       	std	Y+32, r24	; 0x20
    1de0:	84 e0       	ldi	r24, 0x04	; 4
    1de2:	89 a3       	std	Y+33, r24	; 0x21
    1de4:	85 e0       	ldi	r24, 0x05	; 5
    1de6:	8a a3       	std	Y+34, r24	; 0x22

	u8 Local_u8RowValue=96 , Local_u8Flag=0;
    1de8:	80 e6       	ldi	r24, 0x60	; 96
    1dea:	8b a3       	std	Y+35, r24	; 0x23
    1dec:	1f 86       	std	Y+15, r1	; 0x0f
    1dee:	3e c1       	rjmp	.+636    	; 0x206c <Keypad_GetPressedKey+0x2e4>

	for (;Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
    1df0:	88 89       	ldd	r24, Y+16	; 0x10
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	ce 01       	movw	r24, r28
    1df8:	4b 96       	adiw	r24, 0x1b	; 27
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	e2 0f       	add	r30, r18
    1dfe:	f3 1f       	adc	r31, r19
    1e00:	40 81       	ld	r20, Z
    1e02:	88 89       	ldd	r24, Y+16	; 0x10
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	ce 01       	movw	r24, r28
    1e0a:	4f 96       	adiw	r24, 0x1f	; 31
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f3 1f       	adc	r31, r19
    1e12:	90 81       	ld	r25, Z
    1e14:	84 2f       	mov	r24, r20
    1e16:	69 2f       	mov	r22, r25
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
			Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW   );

		for (Local_u8RowIter=0; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    1e1e:	19 8a       	std	Y+17, r1	; 0x11
    1e20:	07 c1       	rjmp	.+526    	; 0x2030 <Keypad_GetPressedKey+0x2a8>
		{
			DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
    1e22:	89 89       	ldd	r24, Y+17	; 0x11
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	ce 01       	movw	r24, r28
    1e2a:	43 96       	adiw	r24, 0x13	; 19
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	e2 0f       	add	r30, r18
    1e30:	f3 1f       	adc	r31, r19
    1e32:	40 81       	ld	r20, Z
    1e34:	89 89       	ldd	r24, Y+17	; 0x11
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	47 96       	adiw	r24, 0x17	; 23
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	90 81       	ld	r25, Z
    1e46:	9e 01       	movw	r18, r28
    1e48:	2d 5d       	subi	r18, 0xDD	; 221
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	84 2f       	mov	r24, r20
    1e4e:	69 2f       	mov	r22, r25
    1e50:	a9 01       	movw	r20, r18
    1e52:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_enuGetPinValue>
					Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);
			if (! Local_u8RowValue)
    1e56:	8b a1       	ldd	r24, Y+35	; 0x23
    1e58:	88 23       	and	r24, r24
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <Keypad_GetPressedKey+0xd6>
    1e5c:	e6 c0       	rjmp	.+460    	; 0x202a <Keypad_GetPressedKey+0x2a2>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 e2       	ldi	r26, 0x20	; 32
    1e64:	b1 e4       	ldi	r27, 0x41	; 65
    1e66:	8b 87       	std	Y+11, r24	; 0x0b
    1e68:	9c 87       	std	Y+12, r25	; 0x0c
    1e6a:	ad 87       	std	Y+13, r26	; 0x0d
    1e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a e7       	ldi	r20, 0x7A	; 122
    1e7c:	55 e4       	ldi	r21, 0x45	; 69
    1e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8f 83       	std	Y+7, r24	; 0x07
    1e88:	98 87       	std	Y+8, r25	; 0x08
    1e8a:	a9 87       	std	Y+9, r26	; 0x09
    1e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <Keypad_GetPressedKey+0x128>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <Keypad_GetPressedKey+0x1a6>
	else if (__tmp > 65535)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	3f ef       	ldi	r19, 0xFF	; 255
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	57 e4       	ldi	r21, 0x47	; 71
    1ec0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <Keypad_GetPressedKey+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <Keypad_GetPressedKey+0x188>
    1ef2:	80 e9       	ldi	r24, 0x90	; 144
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <Keypad_GetPressedKey+0x176>
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <Keypad_GetPressedKey+0x16a>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <Keypad_GetPressedKey+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <Keypad_GetPressedKey+0x1b2>
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
    1f42:	89 89       	ldd	r24, Y+17	; 0x11
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	ce 01       	movw	r24, r28
    1f4a:	43 96       	adiw	r24, 0x13	; 19
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e2 0f       	add	r30, r18
    1f50:	f3 1f       	adc	r31, r19
    1f52:	40 81       	ld	r20, Z
    1f54:	89 89       	ldd	r24, Y+17	; 0x11
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	47 96       	adiw	r24, 0x17	; 23
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e2 0f       	add	r30, r18
    1f62:	f3 1f       	adc	r31, r19
    1f64:	90 81       	ld	r25, Z
    1f66:	9e 01       	movw	r18, r28
    1f68:	2d 5d       	subi	r18, 0xDD	; 221
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6c:	84 2f       	mov	r24, r20
    1f6e:	69 2f       	mov	r22, r25
    1f70:	a9 01       	movw	r20, r18
    1f72:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_enuGetPinValue>
					Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);
				if (! Local_u8RowValue)
    1f76:	8b a1       	ldd	r24, Y+35	; 0x23
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <Keypad_GetPressedKey+0x1f6>
    1f7c:	56 c0       	rjmp	.+172    	; 0x202a <Keypad_GetPressedKey+0x2a2>
    1f7e:	1a c0       	rjmp	.+52     	; 0x1fb4 <Keypad_GetPressedKey+0x22c>
				{
					while (! Local_u8RowValue)
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
    1f80:	89 89       	ldd	r24, Y+17	; 0x11
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	ce 01       	movw	r24, r28
    1f88:	43 96       	adiw	r24, 0x13	; 19
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	e2 0f       	add	r30, r18
    1f8e:	f3 1f       	adc	r31, r19
    1f90:	40 81       	ld	r20, Z
    1f92:	89 89       	ldd	r24, Y+17	; 0x11
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	ce 01       	movw	r24, r28
    1f9a:	47 96       	adiw	r24, 0x17	; 23
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	e2 0f       	add	r30, r18
    1fa0:	f3 1f       	adc	r31, r19
    1fa2:	90 81       	ld	r25, Z
    1fa4:	9e 01       	movw	r18, r28
    1fa6:	2d 5d       	subi	r18, 0xDD	; 221
    1fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1faa:	84 2f       	mov	r24, r20
    1fac:	69 2f       	mov	r22, r25
    1fae:	a9 01       	movw	r20, r18
    1fb0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_enuGetPinValue>
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
					Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);
				if (! Local_u8RowValue)
				{
					while (! Local_u8RowValue)
    1fb4:	8b a1       	ldd	r24, Y+35	; 0x23
    1fb6:	88 23       	and	r24, r24
    1fb8:	19 f3       	breq	.-58     	; 0x1f80 <Keypad_GetPressedKey+0x1f8>
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
							Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);

					u8 Local_Au8KeyValues[ROW_NUM][COL_NUM] =KEYS_VALUES;
    1fba:	ce 01       	movw	r24, r28
    1fbc:	84 96       	adiw	r24, 0x24	; 36
    1fbe:	9f ab       	std	Y+55, r25	; 0x37
    1fc0:	8e ab       	std	Y+54, r24	; 0x36
    1fc2:	eb eb       	ldi	r30, 0xBB	; 187
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	f9 af       	std	Y+57, r31	; 0x39
    1fc8:	e8 af       	std	Y+56, r30	; 0x38
    1fca:	f0 e1       	ldi	r31, 0x10	; 16
    1fcc:	fa af       	std	Y+58, r31	; 0x3a
    1fce:	e8 ad       	ldd	r30, Y+56	; 0x38
    1fd0:	f9 ad       	ldd	r31, Y+57	; 0x39
    1fd2:	00 80       	ld	r0, Z
    1fd4:	88 ad       	ldd	r24, Y+56	; 0x38
    1fd6:	99 ad       	ldd	r25, Y+57	; 0x39
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	99 af       	std	Y+57, r25	; 0x39
    1fdc:	88 af       	std	Y+56, r24	; 0x38
    1fde:	ee a9       	ldd	r30, Y+54	; 0x36
    1fe0:	ff a9       	ldd	r31, Y+55	; 0x37
    1fe2:	00 82       	st	Z, r0
    1fe4:	8e a9       	ldd	r24, Y+54	; 0x36
    1fe6:	9f a9       	ldd	r25, Y+55	; 0x37
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	9f ab       	std	Y+55, r25	; 0x37
    1fec:	8e ab       	std	Y+54, r24	; 0x36
    1fee:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ff0:	91 50       	subi	r25, 0x01	; 1
    1ff2:	9a af       	std	Y+58, r25	; 0x3a
    1ff4:	ea ad       	ldd	r30, Y+58	; 0x3a
    1ff6:	ee 23       	and	r30, r30
    1ff8:	51 f7       	brne	.-44     	; 0x1fce <Keypad_GetPressedKey+0x246>
					*Copy_pu8KeyValue = Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    1ffa:	89 89       	ldd	r24, Y+17	; 0x11
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	88 89       	ldd	r24, Y+16	; 0x10
    2002:	48 2f       	mov	r20, r24
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	22 0f       	add	r18, r18
    2008:	33 1f       	adc	r19, r19
    200a:	22 0f       	add	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	ce 01       	movw	r24, r28
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	84 0f       	add	r24, r20
    2018:	95 1f       	adc	r25, r21
    201a:	fc 01       	movw	r30, r24
    201c:	b3 96       	adiw	r30, 0x23	; 35
    201e:	80 81       	ld	r24, Z
    2020:	ec a9       	ldd	r30, Y+52	; 0x34
    2022:	fd a9       	ldd	r31, Y+53	; 0x35
    2024:	80 83       	st	Z, r24
					Local_u8Flag =1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	8f 87       	std	Y+15, r24	; 0x0f
	for (;Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
			Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW   );

		for (Local_u8RowIter=0; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    202a:	89 89       	ldd	r24, Y+17	; 0x11
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	89 8b       	std	Y+17, r24	; 0x11
    2030:	89 89       	ldd	r24, Y+17	; 0x11
    2032:	84 30       	cpi	r24, 0x04	; 4
    2034:	08 f4       	brcc	.+2      	; 0x2038 <Keypad_GetPressedKey+0x2b0>
    2036:	f5 ce       	rjmp	.-534    	; 0x1e22 <Keypad_GetPressedKey+0x9a>
					Local_u8Flag =1;
				}
			}
		}

		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
    2038:	88 89       	ldd	r24, Y+16	; 0x10
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	ce 01       	movw	r24, r28
    2040:	4b 96       	adiw	r24, 0x1b	; 27
    2042:	fc 01       	movw	r30, r24
    2044:	e2 0f       	add	r30, r18
    2046:	f3 1f       	adc	r31, r19
    2048:	40 81       	ld	r20, Z
    204a:	88 89       	ldd	r24, Y+16	; 0x10
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	ce 01       	movw	r24, r28
    2052:	4f 96       	adiw	r24, 0x1f	; 31
    2054:	fc 01       	movw	r30, r24
    2056:	e2 0f       	add	r30, r18
    2058:	f3 1f       	adc	r31, r19
    205a:	90 81       	ld	r25, Z
    205c:	84 2f       	mov	r24, r20
    205e:	69 2f       	mov	r22, r25
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
	u8 Local_Au8ColGrp[]={C1_GRP, C2_GRP, C3_GRP, C4_GRP};
	u8 Local_Au8ColPin[]={C1_PIN, C2_PIN, C3_PIN, C4_PIN};

	u8 Local_u8RowValue=96 , Local_u8Flag=0;

	for (;Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    2066:	88 89       	ldd	r24, Y+16	; 0x10
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	88 8b       	std	Y+16, r24	; 0x10
    206c:	88 89       	ldd	r24, Y+16	; 0x10
    206e:	84 30       	cpi	r24, 0x04	; 4
    2070:	08 f4       	brcc	.+2      	; 0x2074 <Keypad_GetPressedKey+0x2ec>
    2072:	be ce       	rjmp	.-644    	; 0x1df0 <Keypad_GetPressedKey+0x68>

		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
			Local_Au8ColPin[Local_u8ColIter], DIO_u8HIGH   );

	}
	if (! Local_u8Flag)
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	88 23       	and	r24, r24
    2078:	21 f4       	brne	.+8      	; 0x2082 <Keypad_GetPressedKey+0x2fa>
	{
		*Copy_pu8KeyValue = 0xff;
    207a:	ec a9       	ldd	r30, Y+52	; 0x34
    207c:	fd a9       	ldd	r31, Y+53	; 0x35
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	80 83       	st	Z, r24
	}


	return Local_enuErrorState;
    2082:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2084:	ea 96       	adiw	r28, 0x3a	; 58
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <main>:

#include "main.h"


int main(void)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	ef 97       	sbiw	r28, 0x3f	; 63
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61

	s8 EnteredPassword[MAX_PASS_NUM]={0} ;
    20aa:	84 e1       	ldi	r24, 0x14	; 20
    20ac:	fe 01       	movw	r30, r28
    20ae:	32 96       	adiw	r30, 0x02	; 2
    20b0:	df 01       	movw	r26, r30
    20b2:	98 2f       	mov	r25, r24
    20b4:	1d 92       	st	X+, r1
    20b6:	9a 95       	dec	r25
    20b8:	e9 f7       	brne	.-6      	; 0x20b4 <main+0x1e>
	s8 RightPassword[MAX_PASS_NUM]= "010";
    20ba:	80 e3       	ldi	r24, 0x30	; 48
    20bc:	91 e3       	ldi	r25, 0x31	; 49
    20be:	a0 e3       	ldi	r26, 0x30	; 48
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	8e 8b       	std	Y+22, r24	; 0x16
    20c4:	9f 8b       	std	Y+23, r25	; 0x17
    20c6:	a8 8f       	std	Y+24, r26	; 0x18
    20c8:	b9 8f       	std	Y+25, r27	; 0x19
    20ca:	80 e1       	ldi	r24, 0x10	; 16
    20cc:	fe 01       	movw	r30, r28
    20ce:	7a 96       	adiw	r30, 0x1a	; 26
    20d0:	df 01       	movw	r26, r30
    20d2:	98 2f       	mov	r25, r24
    20d4:	1d 92       	st	X+, r1
    20d6:	9a 95       	dec	r25
    20d8:	e9 f7       	brne	.-6      	; 0x20d4 <main+0x3e>
	s8 MasterPassword[MAX_PASS_NUM]="010" ;
    20da:	80 e3       	ldi	r24, 0x30	; 48
    20dc:	91 e3       	ldi	r25, 0x31	; 49
    20de:	a0 e3       	ldi	r26, 0x30	; 48
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	8a a7       	std	Y+42, r24	; 0x2a
    20e4:	9b a7       	std	Y+43, r25	; 0x2b
    20e6:	ac a7       	std	Y+44, r26	; 0x2c
    20e8:	bd a7       	std	Y+45, r27	; 0x2d
    20ea:	80 e1       	ldi	r24, 0x10	; 16
    20ec:	fe 01       	movw	r30, r28
    20ee:	be 96       	adiw	r30, 0x2e	; 46
    20f0:	df 01       	movw	r26, r30
    20f2:	98 2f       	mov	r25, r24
    20f4:	1d 92       	st	X+, r1
    20f6:	9a 95       	dec	r25
    20f8:	e9 f7       	brne	.-6      	; 0x20f4 <main+0x5e>
	u8 wrongInputRemain = WRONG_INPUTS_ALLOWED;  //number of wrong inputs //save it in EEPROM
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	8e af       	std	Y+62, r24	; 0x3e

	s8 strItrr=0 ;
    20fe:	19 82       	std	Y+1, r1	; 0x01
	//u16 address = 0x1;
	u8 key;

	Keypad_enuInit();
    2100:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <Keypad_enuInit>
	LCD_enuInit();
    2104:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_enuInit>
	LCD_enuWriteCommand(0x0C); //Disable cursor
    2108:	8c e0       	ldi	r24, 0x0C	; 12
    210a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_enuWriteCommand>

	//Buzzer
	DIO_enuSetPinDirection(DIO_u8GROUP_B,DIO_u8PIN0 , DIO_u8OUTPUT);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 12 06 	call	0xc24	; 0xc24 <DIO_enuSetPinDirection>


	//EEPROM_enuWrite(address,data);
	//EEPROM_enuRead(address , &dataFromEEPROM);

	LCD_enuWriteCommand(1);
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_enuWriteCommand>
	LCD_enuWriteString("Enter Password:");
    211e:	80 e6       	ldi	r24, 0x60	; 96
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_enuWriteString>
	LCD_enuGoToPosition(2,1);
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuGoToPosition>


	while(1)
	{

		Keypad_GetPressedKey(&key);
    212e:	ce 01       	movw	r24, r28
    2130:	cf 96       	adiw	r24, 0x3f	; 63
    2132:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Keypad_GetPressedKey>
		if (key != KEYPAD_NOT_PRESSED)
    2136:	8f ad       	ldd	r24, Y+63	; 0x3f
    2138:	8f 3f       	cpi	r24, 0xFF	; 255
    213a:	c9 f3       	breq	.-14     	; 0x212e <main+0x98>
		{

			if(key >= '0' && key <='9')
    213c:	8f ad       	ldd	r24, Y+63	; 0x3f
    213e:	80 33       	cpi	r24, 0x30	; 48
    2140:	c8 f0       	brcs	.+50     	; 0x2174 <main+0xde>
    2142:	8f ad       	ldd	r24, Y+63	; 0x3f
    2144:	8a 33       	cpi	r24, 0x3A	; 58
    2146:	b0 f4       	brcc	.+44     	; 0x2174 <main+0xde>
			{
				BeebSound();
    2148:	0e 94 59 12 	call	0x24b2	; 0x24b2 <BeebSound>
				LCD_enuWriteData('*');
    214c:	8a e2       	ldi	r24, 0x2A	; 42
    214e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LCD_enuWriteData>
				EnteredPassword[strItrr] = key;
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	28 2f       	mov	r18, r24
    2156:	33 27       	eor	r19, r19
    2158:	27 fd       	sbrc	r18, 7
    215a:	30 95       	com	r19
    215c:	8f ad       	ldd	r24, Y+63	; 0x3f
    215e:	48 2f       	mov	r20, r24
    2160:	ce 01       	movw	r24, r28
    2162:	02 96       	adiw	r24, 0x02	; 2
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	40 83       	st	Z, r20
				strItrr++;
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	8f 5f       	subi	r24, 0xFF	; 255
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	dd cf       	rjmp	.-70     	; 0x212e <main+0x98>
			}
			else if('=' == key)
    2174:	8f ad       	ldd	r24, Y+63	; 0x3f
    2176:	8d 33       	cpi	r24, 0x3D	; 61
    2178:	d1 f6       	brne	.-76     	; 0x212e <main+0x98>
			{
				if((strEqual(EnteredPassword , RightPassword ) == STR_EQL) ||
    217a:	ce 01       	movw	r24, r28
    217c:	02 96       	adiw	r24, 0x02	; 2
    217e:	9e 01       	movw	r18, r28
    2180:	2a 5e       	subi	r18, 0xEA	; 234
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	b9 01       	movw	r22, r18
    2186:	0e 94 23 12 	call	0x2446	; 0x2446 <strEqual>
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	51 f0       	breq	.+20     	; 0x21a2 <main+0x10c>
    218e:	ce 01       	movw	r24, r28
    2190:	02 96       	adiw	r24, 0x02	; 2
    2192:	9e 01       	movw	r18, r28
    2194:	26 5d       	subi	r18, 0xD6	; 214
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
    2198:	b9 01       	movw	r22, r18
    219a:	0e 94 23 12 	call	0x2446	; 0x2446 <strEqual>
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	39 f4       	brne	.+14     	; 0x21b0 <main+0x11a>
						(strEqual(EnteredPassword , MasterPassword )== STR_EQL))
				{
					WelcomeTap(RightPassword);
    21a2:	ce 01       	movw	r24, r28
    21a4:	46 96       	adiw	r24, 0x16	; 22
    21a6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <WelcomeTap>
					wrongInputRemain = WRONG_INPUTS_ALLOWED;
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	8e af       	std	Y+62, r24	; 0x3e
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <main+0x122>
				}
				else{
					WrongTap(&wrongInputRemain);
    21b0:	ce 01       	movw	r24, r28
    21b2:	ce 96       	adiw	r24, 0x3e	; 62
    21b4:	0e 94 67 11 	call	0x22ce	; 0x22ce <WrongTap>
				}

				for(strItrr = 0 ; strItrr<MAX_PASS_NUM ; strItrr++)
    21b8:	19 82       	std	Y+1, r1	; 0x01
    21ba:	0e c0       	rjmp	.+28     	; 0x21d8 <main+0x142>
				{
					EnteredPassword[strItrr] = 0;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	33 27       	eor	r19, r19
    21c2:	27 fd       	sbrc	r18, 7
    21c4:	30 95       	com	r19
    21c6:	ce 01       	movw	r24, r28
    21c8:	02 96       	adiw	r24, 0x02	; 2
    21ca:	fc 01       	movw	r30, r24
    21cc:	e2 0f       	add	r30, r18
    21ce:	f3 1f       	adc	r31, r19
    21d0:	10 82       	st	Z, r1
				}
				else{
					WrongTap(&wrongInputRemain);
				}

				for(strItrr = 0 ; strItrr<MAX_PASS_NUM ; strItrr++)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	84 31       	cpi	r24, 0x14	; 20
    21dc:	7c f3       	brlt	.-34     	; 0x21bc <main+0x126>
				{
					EnteredPassword[strItrr] = 0;
				}
				strItrr =0;
    21de:	19 82       	std	Y+1, r1	; 0x01

				LCD_enuWriteCommand(1);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_enuWriteCommand>
				LCD_enuWriteString("Enter Password:");
    21e6:	80 e6       	ldi	r24, 0x60	; 96
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_enuWriteString>
				LCD_enuGoToPosition(2,1);
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuGoToPosition>
    21f6:	9b cf       	rjmp	.-202    	; 0x212e <main+0x98>

000021f8 <WelcomeTap>:
	}
	return 0;
}

void WelcomeTap(s8* Copy_ps8RightPassword)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <WelcomeTap+0x6>
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <WelcomeTap+0x8>
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
	u8 key;
	u8 strItrr=0;
    2208:	19 82       	std	Y+1, r1	; 0x01

	LCD_enuWriteCommand(1);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_enuWriteCommand>
	LCD_enuGoToPosition(1,5);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	65 e0       	ldi	r22, 0x05	; 5
    2214:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuGoToPosition>
	LCD_enuWriteString("Welcome!!");
    2218:	80 e7       	ldi	r24, 0x70	; 112
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_enuWriteString>
	while(1)
	{
		Keypad_GetPressedKey(&key);
    2220:	ce 01       	movw	r24, r28
    2222:	02 96       	adiw	r24, 0x02	; 2
    2224:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Keypad_GetPressedKey>
		if (key != KEYPAD_NOT_PRESSED)
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	8f 3f       	cpi	r24, 0xFF	; 255
    222c:	c9 f3       	breq	.-14     	; 0x2220 <WelcomeTap+0x28>
		{
			if('c'==key) //Lock the locker key
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	83 36       	cpi	r24, 0x63	; 99
    2232:	09 f4       	brne	.+2      	; 0x2236 <WelcomeTap+0x3e>
    2234:	45 c0       	rjmp	.+138    	; 0x22c0 <WelcomeTap+0xc8>
			{
				//move the motor for the lock and check if it really locked
				break;//back to main()
			}
			if('/'==key) //rest password key
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	8f 32       	cpi	r24, 0x2F	; 47
    223a:	91 f7       	brne	.-28     	; 0x2220 <WelcomeTap+0x28>
			{

				//reset all RightPassword to zero
				for(strItrr = 0 ; strItrr<MAX_PASS_NUM ; strItrr++)
    223c:	19 82       	std	Y+1, r1	; 0x01
    223e:	0c c0       	rjmp	.+24     	; 0x2258 <WelcomeTap+0x60>
				{
					Copy_ps8RightPassword[strItrr] = 0;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	fc 01       	movw	r30, r24
    224c:	e2 0f       	add	r30, r18
    224e:	f3 1f       	adc	r31, r19
    2250:	10 82       	st	Z, r1
			}
			if('/'==key) //rest password key
			{

				//reset all RightPassword to zero
				for(strItrr = 0 ; strItrr<MAX_PASS_NUM ; strItrr++)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	84 31       	cpi	r24, 0x14	; 20
    225c:	88 f3       	brcs	.-30     	; 0x2240 <WelcomeTap+0x48>
				{
					Copy_ps8RightPassword[strItrr] = 0;
				}
				strItrr = 0;
    225e:	19 82       	std	Y+1, r1	; 0x01
				/*************************/
				LCD_enuWriteCommand(1);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_enuWriteCommand>
				LCD_enuGoToPosition(1,1);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	61 e0       	ldi	r22, 0x01	; 1
    226a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuGoToPosition>
				LCD_enuWriteString("New Password is:");
    226e:	8a e7       	ldi	r24, 0x7A	; 122
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_enuWriteString>
				LCD_enuGoToPosition(2,1);
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuGoToPosition>
				while(1)
				{
					Keypad_GetPressedKey(&key);
    227e:	ce 01       	movw	r24, r28
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Keypad_GetPressedKey>
					if (key != KEYPAD_NOT_PRESSED)
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	8f 3f       	cpi	r24, 0xFF	; 255
    228a:	c9 f3       	breq	.-14     	; 0x227e <WelcomeTap+0x86>
					{
						if(key >= '0' && key <='9')
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	80 33       	cpi	r24, 0x30	; 48
    2290:	a0 f0       	brcs	.+40     	; 0x22ba <WelcomeTap+0xc2>
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	8a 33       	cpi	r24, 0x3A	; 58
    2296:	88 f4       	brcc	.+34     	; 0x22ba <WelcomeTap+0xc2>
						{
							LCD_enuWriteData('*');
    2298:	8a e2       	ldi	r24, 0x2A	; 42
    229a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LCD_enuWriteData>
							Copy_ps8RightPassword[strItrr] = key;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	9c 81       	ldd	r25, Y+4	; 0x04
    22a8:	fc 01       	movw	r30, r24
    22aa:	e2 0f       	add	r30, r18
    22ac:	f3 1f       	adc	r31, r19
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	80 83       	st	Z, r24
							strItrr++;
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	e2 cf       	rjmp	.-60     	; 0x227e <WelcomeTap+0x86>
						}
						else if('=' == key)
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	8d 33       	cpi	r24, 0x3D	; 61
    22be:	f9 f6       	brne	.-66     	; 0x227e <WelcomeTap+0x86>
				}
				break; //back to main()
			}
		}
	}
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <WrongTap>:

void WrongTap(u8* Copy_ps8wrongInputRemain)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	60 97       	sbiw	r28, 0x10	; 16
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	98 8b       	std	Y+16, r25	; 0x10
    22e4:	8f 87       	std	Y+15, r24	; 0x0f
	if(*Copy_ps8wrongInputRemain  > 0)
    22e6:	ef 85       	ldd	r30, Y+15	; 0x0f
    22e8:	f8 89       	ldd	r31, Y+16	; 0x10
    22ea:	80 81       	ld	r24, Z
    22ec:	88 23       	and	r24, r24
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <WrongTap+0x24>
    22f0:	98 c0       	rjmp	.+304    	; 0x2422 <WrongTap+0x154>
	{
		*Copy_ps8wrongInputRemain -=1;
    22f2:	ef 85       	ldd	r30, Y+15	; 0x0f
    22f4:	f8 89       	ldd	r31, Y+16	; 0x10
    22f6:	80 81       	ld	r24, Z
    22f8:	81 50       	subi	r24, 0x01	; 1
    22fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    22fc:	f8 89       	ldd	r31, Y+16	; 0x10
    22fe:	80 83       	st	Z, r24
		LCD_enuWriteCommand(1);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_enuWriteCommand>
		LCD_enuGoToPosition(1,5);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	65 e0       	ldi	r22, 0x05	; 5
    230a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuGoToPosition>
		LCD_enuWriteString("Wrong!!");
    230e:	8b e8       	ldi	r24, 0x8B	; 139
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_enuWriteString>
		LCD_enuGoToPosition(2,1);
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuGoToPosition>
		//LCD_enuWriteString("you've ");
		LCD_enuWriteIntegerNum(*Copy_ps8wrongInputRemain);
    231e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2320:	f8 89       	ldd	r31, Y+16	; 0x10
    2322:	80 81       	ld	r24, Z
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e0       	ldi	r26, 0x00	; 0
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_enuWriteIntegerNum>
		LCD_enuWriteString(" trial left!!");
    2334:	83 e9       	ldi	r24, 0x93	; 147
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_enuWriteString>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	aa ef       	ldi	r26, 0xFA	; 250
    2342:	b3 e4       	ldi	r27, 0x43	; 67
    2344:	8b 87       	std	Y+11, r24	; 0x0b
    2346:	9c 87       	std	Y+12, r25	; 0x0c
    2348:	ad 87       	std	Y+13, r26	; 0x0d
    234a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234c:	6b 85       	ldd	r22, Y+11	; 0x0b
    234e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2350:	8d 85       	ldd	r24, Y+13	; 0x0d
    2352:	9e 85       	ldd	r25, Y+14	; 0x0e
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	4a e7       	ldi	r20, 0x7A	; 122
    235a:	55 e4       	ldi	r21, 0x45	; 69
    235c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	8f 83       	std	Y+7, r24	; 0x07
    2366:	98 87       	std	Y+8, r25	; 0x08
    2368:	a9 87       	std	Y+9, r26	; 0x09
    236a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236c:	6f 81       	ldd	r22, Y+7	; 0x07
    236e:	78 85       	ldd	r23, Y+8	; 0x08
    2370:	89 85       	ldd	r24, Y+9	; 0x09
    2372:	9a 85       	ldd	r25, Y+10	; 0x0a
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	2c f4       	brge	.+10     	; 0x238e <WrongTap+0xc0>
		__ticks = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	3f c0       	rjmp	.+126    	; 0x240c <WrongTap+0x13e>
	else if (__tmp > 65535)
    238e:	6f 81       	ldd	r22, Y+7	; 0x07
    2390:	78 85       	ldd	r23, Y+8	; 0x08
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	3f ef       	ldi	r19, 0xFF	; 255
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	57 e4       	ldi	r21, 0x47	; 71
    239e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	4c f5       	brge	.+82     	; 0x23f8 <WrongTap+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <WrongTap+0x120>
    23d0:	80 e9       	ldi	r24, 0x90	; 144
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	9c 83       	std	Y+4, r25	; 0x04
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <WrongTap+0x10e>
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	69 f7       	brne	.-38     	; 0x23d0 <WrongTap+0x102>
    23f6:	1e c0       	rjmp	.+60     	; 0x2434 <WrongTap+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <WrongTap+0x14a>
    241c:	9a 83       	std	Y+2, r25	; 0x02
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	09 c0       	rjmp	.+18     	; 0x2434 <WrongTap+0x166>
		_delay_ms(500);
	}
	else{
		LCD_enuWriteCommand(1);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <LCD_enuWriteCommand>
		LCD_enuWriteString("Calling Police...");
    2428:	81 ea       	ldi	r24, 0xA1	; 161
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_enuWriteString>
		Buzzer_TOG();
    2430:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <Buzzer_TOG>
	}
}
    2434:	60 96       	adiw	r28, 0x10	; 16
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <strEqual>:

u8 strEqual(s8* Copy_ps8str1 , s8* Copy_ps8str2)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <strEqual+0x6>
    244c:	00 d0       	rcall	.+0      	; 0x244e <strEqual+0x8>
    244e:	0f 92       	push	r0
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	7c 83       	std	Y+4, r23	; 0x04
    245a:	6b 83       	std	Y+3, r22	; 0x03
    245c:	15 c0       	rjmp	.+42     	; 0x2488 <strEqual+0x42>
	while(*Copy_ps8str1 != 0 || *Copy_ps8str2 != 0)
	{
		if(*Copy_ps8str1 == *Copy_ps8str2){
    245e:	e9 81       	ldd	r30, Y+1	; 0x01
    2460:	fa 81       	ldd	r31, Y+2	; 0x02
    2462:	90 81       	ld	r25, Z
    2464:	eb 81       	ldd	r30, Y+3	; 0x03
    2466:	fc 81       	ldd	r31, Y+4	; 0x04
    2468:	80 81       	ld	r24, Z
    246a:	98 17       	cp	r25, r24
    246c:	59 f4       	brne	.+22     	; 0x2484 <strEqual+0x3e>
			Copy_ps8str1++;
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
			Copy_ps8str2++;
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <strEqual+0x42>
		}
		else{
			return STR_NEQL;
    2484:	1d 82       	std	Y+5, r1	; 0x05
    2486:	0c c0       	rjmp	.+24     	; 0x24a0 <strEqual+0x5a>
	}
}

u8 strEqual(s8* Copy_ps8str1 , s8* Copy_ps8str2)
{
	while(*Copy_ps8str1 != 0 || *Copy_ps8str2 != 0)
    2488:	e9 81       	ldd	r30, Y+1	; 0x01
    248a:	fa 81       	ldd	r31, Y+2	; 0x02
    248c:	80 81       	ld	r24, Z
    248e:	88 23       	and	r24, r24
    2490:	31 f7       	brne	.-52     	; 0x245e <strEqual+0x18>
    2492:	eb 81       	ldd	r30, Y+3	; 0x03
    2494:	fc 81       	ldd	r31, Y+4	; 0x04
    2496:	80 81       	ld	r24, Z
    2498:	88 23       	and	r24, r24
    249a:	09 f7       	brne	.-62     	; 0x245e <strEqual+0x18>
		}
		else{
			return STR_NEQL;
		}
	}
	return STR_EQL;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <BeebSound>:

void BeebSound(void)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2e 97       	sbiw	r28, 0x0e	; 14
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(DIO_u8GROUP_B,DIO_u8PIN0, DIO_u8HIGH);
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a8 ec       	ldi	r26, 0xC8	; 200
    24d6:	b2 e4       	ldi	r27, 0x42	; 66
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
    24da:	9c 87       	std	Y+12, r25	; 0x0c
    24dc:	ad 87       	std	Y+13, r26	; 0x0d
    24de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a e7       	ldi	r20, 0x7A	; 122
    24ee:	55 e4       	ldi	r21, 0x45	; 69
    24f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8f 83       	std	Y+7, r24	; 0x07
    24fa:	98 87       	std	Y+8, r25	; 0x08
    24fc:	a9 87       	std	Y+9, r26	; 0x09
    24fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <BeebSound+0x70>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <BeebSound+0xee>
	else if (__tmp > 65535)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <BeebSound+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	6b 85       	ldd	r22, Y+11	; 0x0b
    253c:	7c 85       	ldd	r23, Y+12	; 0x0c
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <BeebSound+0xd0>
    2564:	80 e9       	ldi	r24, 0x90	; 144
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <BeebSound+0xbe>
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <BeebSound+0xb2>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <BeebSound+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <BeebSound+0xfa>
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	DIO_enuSetPinValue(DIO_u8GROUP_B,DIO_u8PIN0, DIO_u8LOW);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_enuSetPinValue>
}
    25be:	2e 96       	adiw	r28, 0x0e	; 14
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <Buzzer_TOG>:
void  Buzzer_TOG( void )
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	2e 97       	sbiw	r28, 0x0e	; 14
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
	//BUZZER Waiting B0
	while(1)
	{
		DIO_enuTogglePinValue(DIO_u8GROUP_B,DIO_u8PIN0);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_enuTogglePinValue>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	aa ef       	ldi	r26, 0xFA	; 250
    25f2:	b3 e4       	ldi	r27, 0x43	; 67
    25f4:	8b 87       	std	Y+11, r24	; 0x0b
    25f6:	9c 87       	std	Y+12, r25	; 0x0c
    25f8:	ad 87       	std	Y+13, r26	; 0x0d
    25fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2600:	8d 85       	ldd	r24, Y+13	; 0x0d
    2602:	9e 85       	ldd	r25, Y+14	; 0x0e
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	4a e7       	ldi	r20, 0x7A	; 122
    260a:	55 e4       	ldi	r21, 0x45	; 69
    260c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	8f 83       	std	Y+7, r24	; 0x07
    2616:	98 87       	std	Y+8, r25	; 0x08
    2618:	a9 87       	std	Y+9, r26	; 0x09
    261a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    261c:	6f 81       	ldd	r22, Y+7	; 0x07
    261e:	78 85       	ldd	r23, Y+8	; 0x08
    2620:	89 85       	ldd	r24, Y+9	; 0x09
    2622:	9a 85       	ldd	r25, Y+10	; 0x0a
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5f e3       	ldi	r21, 0x3F	; 63
    262c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2630:	88 23       	and	r24, r24
    2632:	2c f4       	brge	.+10     	; 0x263e <Buzzer_TOG+0x6e>
		__ticks = 1;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	3f c0       	rjmp	.+126    	; 0x26bc <Buzzer_TOG+0xec>
	else if (__tmp > 65535)
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	57 e4       	ldi	r21, 0x47	; 71
    264e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	4c f5       	brge	.+82     	; 0x26a8 <Buzzer_TOG+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6b 85       	ldd	r22, Y+11	; 0x0b
    2658:	7c 85       	ldd	r23, Y+12	; 0x0c
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	9e 85       	ldd	r25, Y+14	; 0x0e
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	8d 83       	std	Y+5, r24	; 0x05
    267e:	0f c0       	rjmp	.+30     	; 0x269e <Buzzer_TOG+0xce>
    2680:	80 e9       	ldi	r24, 0x90	; 144
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	9c 83       	std	Y+4, r25	; 0x04
    2686:	8b 83       	std	Y+3, r24	; 0x03
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <Buzzer_TOG+0xbc>
    2690:	9c 83       	std	Y+4, r25	; 0x04
    2692:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269e:	8d 81       	ldd	r24, Y+5	; 0x05
    26a0:	9e 81       	ldd	r25, Y+6	; 0x06
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	69 f7       	brne	.-38     	; 0x2680 <Buzzer_TOG+0xb0>
    26a6:	9e cf       	rjmp	.-196    	; 0x25e4 <Buzzer_TOG+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a8:	6f 81       	ldd	r22, Y+7	; 0x07
    26aa:	78 85       	ldd	r23, Y+8	; 0x08
    26ac:	89 85       	ldd	r24, Y+9	; 0x09
    26ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	9a 83       	std	Y+2, r25	; 0x02
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <Buzzer_TOG+0xf8>
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 cf       	rjmp	.-238    	; 0x25e4 <Buzzer_TOG+0x14>

000026d2 <__divmodsi4>:
    26d2:	97 fb       	bst	r25, 7
    26d4:	09 2e       	mov	r0, r25
    26d6:	05 26       	eor	r0, r21
    26d8:	0e d0       	rcall	.+28     	; 0x26f6 <__divmodsi4_neg1>
    26da:	57 fd       	sbrc	r21, 7
    26dc:	04 d0       	rcall	.+8      	; 0x26e6 <__divmodsi4_neg2>
    26de:	14 d0       	rcall	.+40     	; 0x2708 <__udivmodsi4>
    26e0:	0a d0       	rcall	.+20     	; 0x26f6 <__divmodsi4_neg1>
    26e2:	00 1c       	adc	r0, r0
    26e4:	38 f4       	brcc	.+14     	; 0x26f4 <__divmodsi4_exit>

000026e6 <__divmodsi4_neg2>:
    26e6:	50 95       	com	r21
    26e8:	40 95       	com	r20
    26ea:	30 95       	com	r19
    26ec:	21 95       	neg	r18
    26ee:	3f 4f       	sbci	r19, 0xFF	; 255
    26f0:	4f 4f       	sbci	r20, 0xFF	; 255
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255

000026f4 <__divmodsi4_exit>:
    26f4:	08 95       	ret

000026f6 <__divmodsi4_neg1>:
    26f6:	f6 f7       	brtc	.-4      	; 0x26f4 <__divmodsi4_exit>
    26f8:	90 95       	com	r25
    26fa:	80 95       	com	r24
    26fc:	70 95       	com	r23
    26fe:	61 95       	neg	r22
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	8f 4f       	sbci	r24, 0xFF	; 255
    2704:	9f 4f       	sbci	r25, 0xFF	; 255
    2706:	08 95       	ret

00002708 <__udivmodsi4>:
    2708:	a1 e2       	ldi	r26, 0x21	; 33
    270a:	1a 2e       	mov	r1, r26
    270c:	aa 1b       	sub	r26, r26
    270e:	bb 1b       	sub	r27, r27
    2710:	fd 01       	movw	r30, r26
    2712:	0d c0       	rjmp	.+26     	; 0x272e <__udivmodsi4_ep>

00002714 <__udivmodsi4_loop>:
    2714:	aa 1f       	adc	r26, r26
    2716:	bb 1f       	adc	r27, r27
    2718:	ee 1f       	adc	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	a2 17       	cp	r26, r18
    271e:	b3 07       	cpc	r27, r19
    2720:	e4 07       	cpc	r30, r20
    2722:	f5 07       	cpc	r31, r21
    2724:	20 f0       	brcs	.+8      	; 0x272e <__udivmodsi4_ep>
    2726:	a2 1b       	sub	r26, r18
    2728:	b3 0b       	sbc	r27, r19
    272a:	e4 0b       	sbc	r30, r20
    272c:	f5 0b       	sbc	r31, r21

0000272e <__udivmodsi4_ep>:
    272e:	66 1f       	adc	r22, r22
    2730:	77 1f       	adc	r23, r23
    2732:	88 1f       	adc	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	1a 94       	dec	r1
    2738:	69 f7       	brne	.-38     	; 0x2714 <__udivmodsi4_loop>
    273a:	60 95       	com	r22
    273c:	70 95       	com	r23
    273e:	80 95       	com	r24
    2740:	90 95       	com	r25
    2742:	9b 01       	movw	r18, r22
    2744:	ac 01       	movw	r20, r24
    2746:	bd 01       	movw	r22, r26
    2748:	cf 01       	movw	r24, r30
    274a:	08 95       	ret

0000274c <__prologue_saves__>:
    274c:	2f 92       	push	r2
    274e:	3f 92       	push	r3
    2750:	4f 92       	push	r4
    2752:	5f 92       	push	r5
    2754:	6f 92       	push	r6
    2756:	7f 92       	push	r7
    2758:	8f 92       	push	r8
    275a:	9f 92       	push	r9
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	ca 1b       	sub	r28, r26
    2776:	db 0b       	sbc	r29, r27
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	09 94       	ijmp

00002784 <__epilogue_restores__>:
    2784:	2a 88       	ldd	r2, Y+18	; 0x12
    2786:	39 88       	ldd	r3, Y+17	; 0x11
    2788:	48 88       	ldd	r4, Y+16	; 0x10
    278a:	5f 84       	ldd	r5, Y+15	; 0x0f
    278c:	6e 84       	ldd	r6, Y+14	; 0x0e
    278e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2790:	8c 84       	ldd	r8, Y+12	; 0x0c
    2792:	9b 84       	ldd	r9, Y+11	; 0x0b
    2794:	aa 84       	ldd	r10, Y+10	; 0x0a
    2796:	b9 84       	ldd	r11, Y+9	; 0x09
    2798:	c8 84       	ldd	r12, Y+8	; 0x08
    279a:	df 80       	ldd	r13, Y+7	; 0x07
    279c:	ee 80       	ldd	r14, Y+6	; 0x06
    279e:	fd 80       	ldd	r15, Y+5	; 0x05
    27a0:	0c 81       	ldd	r16, Y+4	; 0x04
    27a2:	1b 81       	ldd	r17, Y+3	; 0x03
    27a4:	aa 81       	ldd	r26, Y+2	; 0x02
    27a6:	b9 81       	ldd	r27, Y+1	; 0x01
    27a8:	ce 0f       	add	r28, r30
    27aa:	d1 1d       	adc	r29, r1
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	ed 01       	movw	r28, r26
    27b8:	08 95       	ret

000027ba <_exit>:
    27ba:	f8 94       	cli

000027bc <__stop_program>:
    27bc:	ff cf       	rjmp	.-2      	; 0x27bc <__stop_program>
